basePath: /api
definitions:
  api.Response:
    properties:
      message:
        type: string
      result: {}
      success:
        type: boolean
    type: object
  entity.District:
    properties:
      code:
        type: integer
      nameEN:
        type: string
      nameTH:
        type: string
      provinceCode:
        type: integer
    type: object
  entity.Order:
    properties:
      brandName:
        example: BEWELL
        type: string
      createDate:
        example: "2024-11-22 09:45:33.260"
        type: string
      custAddress:
        example: 7/20
        type: string
      custDistrict:
        example: Bang-Kruay
        type: string
      custName:
        example: Fa
        type: string
      custPhoneNum:
        example: "0912345678"
        type: string
      custPostCode:
        example: "11130"
        type: string
      custProvince:
        example: Nonthaburi
        type: string
      custSubDistrict:
        example: Bang-Kruay
        type: string
      orderLine:
        items:
          $ref: '#/definitions/entity.OrderLine'
        type: array
      orderNo:
        example: OD0001
        type: string
      updateDate:
        example: "2024-11-30 09:45:33.260"
        type: string
      userCreated:
        example: intern
        type: string
      userUpdates:
        example: intern
        type: string
    type: object
  entity.OrderLine:
    properties:
      itemName:
        example: เก้าอี้
        type: string
      orderNo:
        example: OD0001
        type: string
      price:
        example: 5900
        type: number
      qty:
        example: 5
        type: integer
      sku:
        example: SKU12345
        type: string
    type: object
  entity.Province:
    properties:
      code:
        type: integer
      nameEN:
        type: string
      nameTH:
        type: string
    type: object
  entity.ROM_V_ProductAll:
    properties:
      barcode:
        description: บาร์โค้ดของสินค้า
        type: string
      nameAlias:
        description: ชื่อย่อของสินค้า
        type: string
      size:
        description: ขนาดของสินค้า
        type: string
      sizeID:
        description: รหัสขนาดของสินค้า
        type: string
      sku:
        description: รหัสสินค้า
        type: string
      type:
        description: ประเภทของสินค้า
        type: string
    type: object
  entity.ReturnOrder:
    properties:
      axStatusID:
        description: สถานะในระบบ AX
        type: integer
      cancelID:
        description: รหัสการยกเลิก
        type: integer
      channelID:
        description: รหัสช่องทางการขาย (FK -> Channel)
        type: integer
      checkBy:
        description: ผู้ตรวจสอบ
        type: string
      createBy:
        description: ผู้สร้างรายการ
        type: string
      createDate:
        description: วันที่สร้างรายการ
        type: string
      description:
        description: รายละเอียดเพิ่มเติม
        type: string
      optStatusID:
        description: สถานะการดำเนินการ
        type: integer
      orderNo:
        description: เลขที่ใบสั่งซื้อ
        type: string
      platfID:
        description: รหัสแพลตฟอร์ม (FK -> Platforms)
        type: integer
      platfStatusID:
        description: สถานะในแพลตฟอร์ม
        type: integer
      remark:
        description: หมายเหตุ
        type: string
      returnID:
        description: เลขที่ใบคืนสินค้า (Primary Key)
        type: string
      saleOrder:
        description: เลขที่ใบกำกับภาษี
        type: string
      saleReturn:
        description: เลขที่ใบลดหนี้
        type: string
      statusCheckID:
        description: สถานะการตรวจสอบ (FK -> StatusCheck)
        type: integer
      trackingNo:
        description: เลขพัสดุ
        type: string
      updateBy:
        description: ผู้แก้ไขล่าสุด
        type: string
      updateDate:
        description: วันที่แก้ไขล่าสุด
        type: string
    type: object
  entity.ReturnOrderLine:
    properties:
      alterSKU:
        description: รหัสสินค้าทดแทน
        type: string
      checkQTY:
        description: จำนวนที่ตรวจสอบแล้ว
        type: integer
      createBy:
        description: ผู้สร้างรายการ
        type: string
      createDate:
        description: วันที่สร้างรายการ
        type: string
      orderNo:
        description: เลขที่ใบสั่งซื้อ
        type: string
      price:
        description: ราคาต่อหน่วย
        type: number
      recID:
        description: รหัสอ้างอิงอัตโนมัติ
        type: integer
      returnID:
        description: เลขที่ใบคืนสินค้า (FK -> ReturnOrder)
        type: string
      returnQTY:
        description: จำนวนที่คืน
        type: integer
      sku:
        description: รหัสสินค้า
        type: string
      trackingNo:
        description: เลขพัสดุ
        type: string
      updateBy:
        description: ผู้แก้ไขล่าสุด
        type: string
      updateDate:
        description: วันที่แก้ไขล่าสุด
        type: string
    type: object
  entity.SubDistrict:
    properties:
      code:
        type: integer
      districtCode:
        type: integer
      nameEN:
        type: string
      nameTH:
        type: string
      zipCode:
        type: string
    type: object
  entity.Warehouse:
    properties:
      location:
        description: ที่ตั้งของคลังสินค้า
        type: string
      warehouseID:
        description: รหัสคลังสินค้า
        type: integer
      warehouseName:
        description: ชื่อคลังสินค้า
        type: string
    type: object
  request.BeforeReturnOrder:
    properties:
      beforeReturnOrderLines:
        items:
          $ref: '#/definitions/request.BeforeReturnOrderLine'
        type: array
      cancelID:
        description: UpdateDate             *time.Time              `json:"updateDate"
          db:"UpdateDate"` // MSSQL GetDate() function
        type: integer
      channelID:
        type: integer
      confirmBy:
        type: string
      createBy:
        type: string
      customerID:
        type: string
      logistic:
        type: string
      mkpStatusID:
        type: integer
      orderNo:
        type: string
      returnDate:
        type: string
      returnType:
        type: string
      saleOrder:
        type: string
      saleReturn:
        type: string
      soStatusID:
        type: integer
      statusConfID:
        type: integer
      statusReturnID:
        type: integer
      trackingNo:
        type: string
      updateBy:
        description: CreateDate             *time.Time              `json:"createDate"
          db:"CreateDate"` // MSSQL GetDate() function
        type: string
      warehouseID:
        type: integer
    type: object
  request.BeforeReturnOrderLine:
    properties:
      alterSKU:
        type: string
      createBy:
        type: string
      orderNo:
        type: string
      price:
        type: number
      qty:
        type: integer
      returnQty:
        type: integer
      sku:
        type: string
      trackingNo:
        type: string
      updateBy:
        type: string
    type: object
  request.CreateOrderRequest:
    properties:
      brandName:
        example: BEWELL
        type: string
      custAddress:
        example: 7/20
        type: string
      custDistrict:
        example: Bang-Kruay
        type: string
      custName:
        example: Fa
        type: string
      custPhoneNum:
        example: "0912345678"
        type: string
      custPostCode:
        example: "11130"
        type: string
      custProvince:
        example: Nonthaburi
        type: string
      custSubDistrict:
        example: Bang-Kruay
        type: string
      orderLines:
        items:
          $ref: '#/definitions/request.OrderLineRequest'
        type: array
      orderNo:
        example: OD0001
        type: string
    type: object
  request.CreateReturnOrder:
    properties:
      ReturnOrderLine:
        items:
          $ref: '#/definitions/request.ReturnOrderLine'
        type: array
      axStatusId:
        example: 1
        type: integer
      cancelId:
        example: 1
        type: integer
      channelId:
        example: 2
        type: integer
      checkBy:
        example: dev03
        type: string
      description:
        example: ""
        type: string
      optStatusId:
        example: 1
        type: integer
      orderNo:
        example: ORD0001
        type: string
      platfId:
        example: 1
        type: integer
      platfStatusId:
        example: 1
        type: integer
      remark:
        example: ""
        type: string
      returnId:
        example: RID0001
        type: string
      saleOrder:
        example: SO0001
        type: string
      saleReturn:
        example: SR0001
        type: string
      statusCheckId:
        example: 1
        type: integer
      trackingNo:
        example: 12345678TH
        type: string
    type: object
  request.Login:
    properties:
      password:
        example: string
        type: string
      userName:
        example: DC53002
        type: string
    type: object
  request.LoginLark:
    properties:
      userID:
        example: DC99999
        type: string
      userName:
        example: eknarin
        type: string
    type: object
  request.LoginWeb:
    properties:
      password:
        example: asdfhdskjf
        type: string
      userName:
        example: eknarin
        type: string
    type: object
  request.OrderLineRequest:
    properties:
      itemName:
        example: เก้าอี้
        type: string
      price:
        example: 5900
        type: number
      qty:
        example: 5
        type: integer
      sku:
        example: SKU12345
        type: string
    type: object
  request.ReturnOrderLine:
    properties:
      checkQTY:
        example: 5
        type: integer
      price:
        example: 199.99
        type: number
      returnQTY:
        example: 5
        type: integer
      sku:
        example: SKU12345
        type: string
    type: object
  request.UpdateOrderRequest:
    properties:
      custAddress:
        example: 1/12
        type: string
      custDistrict:
        example: Bang-Plad
        type: string
      custName:
        example: Fa
        type: string
      custPhoneNum:
        example: "0921234567"
        type: string
      custPostCode:
        example: "10600"
        type: string
      custProvince:
        example: Bangkok
        type: string
      custSubDistrict:
        example: Bang-Plad
        type: string
    type: object
  request.UpdateReturnOrder:
    properties:
      axStatusId:
        example: 1
        type: integer
      cancelId:
        example: 1
        type: integer
      channelId:
        example: 2
        type: integer
      checkBy:
        example: dev03
        type: string
      description:
        example: ""
        type: string
      optStatusId:
        example: 1
        type: integer
      platfId:
        example: 1
        type: integer
      platfStatusId:
        example: 1
        type: integer
      remark:
        example: ""
        type: string
      saleReturn:
        example: SR0001
        type: string
      statusCheckId:
        example: 1
        type: integer
      trackingNo:
        example: 12345678TH
        type: string
    type: object
  response.Login:
    properties:
      fullNameTH:
        example: test1234
        type: string
      nickName:
        example: test1234
        type: string
      platform:
        example: test1234
        type: string
      roleID:
        example: 1
        type: integer
      userID:
        example: userID
        type: string
      userName:
        example: userName
        type: string
    type: object
  response.UserPermission:
    properties:
      departmentNo:
        type: string
      description:
        type: string
      fullNameTH:
        type: string
      nickName:
        type: string
      permission:
        type: string
      roleID:
        type: integer
      roleName:
        type: string
      userID:
        type: string
      userName:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server for Boilerplate project .
  title: Boilerplate Service
  version: "1.0"
paths:
  /auth:
    get:
      consumes:
      - application/json
      description: A test endpoint to check if the user is authenticated and to demonstrate
        Swagger documentation.
      operationId: check-authentication
      produces:
      - application/json
      responses:
        "200":
          description: Authenticated user details
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  additionalProperties: true
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Check Authentication
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Handles user login requests and generates a token for the authenticated
        user.
      operationId: user-login
      parameters:
      - description: User login credentials in JSON format
        in: body
        name: login-request
        required: true
        schema:
          $ref: '#/definitions/request.LoginWeb'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: User Login
      tags:
      - Auth
  /auth/login-lark:
    post:
      consumes:
      - application/json
      description: Handles user login requests and generates a token for the authenticated
        user.
      operationId: user-login-lark
      parameters:
      - description: User login from lark credentials from Lark in JSON format
        in: body
        name: Login-request-lark
        required: true
        schema:
          $ref: '#/definitions/request.LoginLark'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: User Lark Login
      tags:
      - Auth
  /auth/logout:
    post:
      description: Logs out the user by deleting the JWT token.
      operationId: user-logout
      responses:
        "200":
          description: Logout successful
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: User Logout
      tags:
      - Auth
  /before-return-order/{orderNo}:
    get:
      consumes:
      - application/json
      description: Retrieve the details of a specific return order by its order number
      operationId: get-before-return-order-by-order-no
      parameters:
      - description: Order number
        in: path
        name: orderNo
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get return order by order number
      tags:
      - Before Return Order
  /before-return-order/create:
    post:
      consumes:
      - application/json
      description: Create a new return order with the provided details
      operationId: create-before-return-order-with-lines
      parameters:
      - description: Before return order details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.BeforeReturnOrder'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Create a new return order with lines
      tags:
      - Before Return Order
  /before-return-order/line/{orderNo}:
    get:
      consumes:
      - application/json
      description: Retrieve the details of all return order lines by order number
      operationId: get-before-return-order-line-by-order-no
      parameters:
      - description: Order number
        in: path
        name: orderNo
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get return order lines by order number
      tags:
      - Before Return Order
  /before-return-order/list-lines:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all return order lines
      operationId: list-before-return-order-lines
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: List all return order lines
      tags:
      - Before Return Order
  /before-return-order/list-orders:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all before return orders
      operationId: list-before-return-orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: List all return orders
      tags:
      - Before Return Order
  /before-return-order/search/{soNo}:
    get:
      consumes:
      - application/json
      description: Retrieve the details of a sale order by its SO number
      operationId: search-sale-order
      parameters:
      - description: SO number
        in: path
        name: soNo
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Search sale order by SO number
      tags:
      - Search Sale Order
  /before-return-order/update/{orderNo}:
    put:
      consumes:
      - application/json
      description: Update an existing return order with the provided details
      operationId: update-return-order-with-lines
      parameters:
      - description: Order number
        in: path
        name: orderNo
        required: true
        type: string
      - description: Before return order details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.BeforeReturnOrder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Update an existing return order with lines
      tags:
      - Before Return Order
  /constants/get-district:
    get:
      consumes:
      - application/json
      description: Get all Thai District.
      operationId: get-district
      produces:
      - application/json
      responses:
        "200":
          description: District
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.District'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: District not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Thai District
      tags:
      - Constants
  /constants/get-productAll:
    get:
      consumes:
      - application/json
      description: Get all product
      operationId: get-productAll
      produces:
      - application/json
      responses:
        "200":
          description: Product
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.ROM_V_ProductAll'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: SubDistrict not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get ProductAll
      tags:
      - Constants
  /constants/get-province:
    get:
      consumes:
      - application/json
      description: Get all Thai Province.
      operationId: get-province
      produces:
      - application/json
      responses:
        "200":
          description: Province
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.Province'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Province not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Thai Province
      tags:
      - Constants
  /constants/get-sub-district:
    get:
      consumes:
      - application/json
      description: Get all Thai SubDistrict.
      operationId: get-sub-district
      produces:
      - application/json
      responses:
        "200":
          description: SubDistrict
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.SubDistrict'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: SubDistrict not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Thai SubDistrict
      tags:
      - Constants
  /constants/get-warehouse:
    get:
      consumes:
      - application/json
      description: Get Warehouse
      operationId: get-warehouse
      produces:
      - application/json
      responses:
        "200":
          description: Warehouse
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.Warehouse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: SubDistrict not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Warehouse
      tags:
      - Constants
  /orders/allgetorder:
    get:
      consumes:
      - application/json
      description: Get all Order
      operationId: Allget-order
      produces:
      - application/json
      responses:
        "200":
          description: Order Get
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.Order'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Province not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Order
      tags:
      - Orders
  /orders/create-order:
    post:
      consumes:
      - application/json
      description: Create a new order
      operationId: create-order
      parameters:
      - description: Order Data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/request.CreateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Order Created
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.Order'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Create Order
      tags:
      - Orders
  /orders/delete/{orderNo}:
    delete:
      consumes:
      - application/json
      description: Delete an order
      operationId: delete-order
      parameters:
      - description: Order Number
        in: path
        name: orderNo
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order Deleted
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  type: string
              type: object
        "204":
          description: No Content, Order Delete Successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Order Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Delete Order
      tags:
      - Orders
  /orders/getbyID/{orderNo}:
    get:
      consumes:
      - application/json
      description: Get details of an order by its order number
      operationId: get-order-by-id
      parameters:
      - description: Order Number
        in: path
        name: orderNo
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order Get by ID
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.Order'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Order not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Order by ID
      tags:
      - Orders
  /orders/update/{orderNo}:
    put:
      consumes:
      - application/json
      description: Update an existing order
      operationId: update-order
      parameters:
      - description: Order Number
        in: path
        name: orderNo
        required: true
        type: string
      - description: Updated Order Data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/request.UpdateOrderRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Order Updated
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  type: string
              type: object
        "204":
          description: No Content, Order Updated Successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Order Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Update Order
      tags:
      - Orders
  /reorder/allget:
    get:
      consumes:
      - application/json
      description: Get all Return Order
      operationId: Allget-ReturnOrder
      produces:
      - application/json
      responses:
        "200":
          description: Get All
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.ReturnOrder'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: not found endpoint
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Return Order
      tags:
      - ReturnOrder
  /reorder/allgetline:
    get:
      consumes:
      - application/json
      description: Get all Return Order Line
      operationId: Allget-ReturnOrderLine
      produces:
      - application/json
      responses:
        "200":
          description: Get Order Line All
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.ReturnOrderLine'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: not found endpoint
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Return Order Line
      tags:
      - ReturnOrder
  /reorder/create:
    post:
      consumes:
      - application/json
      description: Create a new order
      operationId: Create-ReturnOrder
      parameters:
      - description: ReturnOrder Data
        in: body
        name: CreateReturnOrder
        required: true
        schema:
          $ref: '#/definitions/request.CreateReturnOrder'
      produces:
      - application/json
      responses:
        "201":
          description: ReturnOrder Created
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/request.CreateReturnOrder'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Create Order
      tags:
      - ReturnOrder
  /reorder/delete/{returnID}:
    delete:
      consumes:
      - application/json
      description: Delete an order
      operationId: delete-ReturnOrder
      parameters:
      - description: Return ID
        in: path
        name: returnID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ReturnOrder Deleted
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  type: string
              type: object
        "204":
          description: No Content, Order Delete Successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Order Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Delete Order
      tags:
      - ReturnOrder
  /reorder/getbyID/{returnID}:
    get:
      consumes:
      - application/json
      description: Get details of an order by its return id
      operationId: GetByID-ReturnOrder
      parameters:
      - description: Return ID
        in: path
        name: returnID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get by ID
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.ReturnOrder'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: not found endpoint
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Return Order by ID
      tags:
      - ReturnOrder
  /reorder/getlinebyID/{returnID}:
    get:
      consumes:
      - application/json
      description: Get details of an order line by its return id
      operationId: GetLineByID-ReturnOrder
      parameters:
      - description: Return ID
        in: path
        name: returnID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get by ID
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.ReturnOrderLine'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: not found endpoint
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Return Order Line by ID
      tags:
      - ReturnOrder
  /reorder/update/{returnID}:
    patch:
      consumes:
      - application/json
      description: Update an existing return order using returnID in the path
      operationId: Update-ReturnOrder
      parameters:
      - description: Return ID
        in: path
        name: returnID
        required: true
        type: string
      - description: Updated Order Data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/request.UpdateReturnOrder'
      produces:
      - application/json
      responses:
        "200":
          description: ReturnOrder Updated Successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Order Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Update Order
      tags:
      - ReturnOrder
  /test/login:
    post:
      consumes:
      - application/json
      description: Handles user login requests and generates a token for the authenticated
        user.
      operationId: usertest-login
      parameters:
      - description: User login credentials in JSON format
        in: body
        name: login-request
        required: true
        schema:
          $ref: '#/definitions/request.Login'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: User Login
      tags:
      - LoginTest
  /user/get-user:
    get:
      consumes:
      - application/json
      description: Retrieve the details of a user by their username and password
      operationId: get-user
      parameters:
      - description: Username
        in: query
        name: username
        required: true
        type: string
      - description: Password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.Login'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get user by username and password
      tags:
      - User
  /user/get-user-with-permission:
    get:
      consumes:
      - application/json
      description: Retrieve the details of a user with permissions by their username
        and password
      operationId: get-user-with-permission
      parameters:
      - description: Username
        in: query
        name: username
        required: true
        type: string
      - description: Password
        in: query
        name: password
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User with permissions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.UserPermission'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get user with permissions by username and password
      tags:
      - User
swagger: "2.0"
