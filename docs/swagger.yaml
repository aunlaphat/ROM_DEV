basePath: /api
definitions:
  api.Response:
    properties:
      message:
        type: string
      result: {}
      success:
        type: boolean
    type: object
  entity.District:
    properties:
      code:
        type: integer
      nameEN:
        type: string
      nameTH:
        type: string
      provinceCode:
        type: integer
    type: object
  entity.Province:
    properties:
      code:
        type: integer
      nameEN:
        type: string
      nameTH:
        type: string
    type: object
  entity.ROM_V_ProductAll:
    properties:
      barcode:
        description: บาร์โค้ดของสินค้า
        type: string
      nameAlias:
        description: ชื่อย่อของสินค้า
        type: string
      size:
        description: ขนาดของสินค้า
        type: string
      sizeID:
        description: รหัสขนาดของสินค้า
        type: string
      sku:
        description: รหัสสินค้า
        type: string
      type:
        description: ประเภทของสินค้า
        type: string
    type: object
  entity.SubDistrict:
    properties:
      code:
        type: integer
      districtCode:
        type: integer
      nameEN:
        type: string
      nameTH:
        type: string
      zipCode:
        type: string
    type: object
  entity.Warehouse:
    properties:
      location:
        description: ที่ตั้งของคลังสินค้า
        type: string
      warehouseID:
        description: รหัสคลังสินค้า (PK - Auto Increment)
        type: integer
      warehouseName:
        description: ชื่อคลังสินค้า
        type: string
    type: object
  request.BeforeReturnOrder:
    properties:
      beforeReturnOrderLines:
        items:
          $ref: '#/definitions/request.BeforeReturnOrderLine'
        type: array
      cancelID:
        description: UpdateDate   *time.Time `json:"updateDate" db:"UpdateDate"` //
          MSSQL GetDate()
        type: integer
      channelID:
        type: integer
      confirmBy:
        type: string
      createBy:
        description: ConfirmDate  *time.Time `json:"confirmDate" db:"ConfirmDate"`
          // MSSQL GetDate()
        type: string
      customerID:
        type: string
      logistic:
        type: string
      mkpStatusID:
        type: integer
      orderNo:
        description: "RecID\t\t   int        `json:\"recID\" db:\"RecID\"` // (PK
          - Auto Increment)"
        type: string
      reason:
        type: string
      returnDate:
        type: string
      soNo:
        type: string
      soStatusID:
        type: integer
      srNo:
        type: string
      statusConfID:
        type: integer
      statusReturnID:
        type: integer
      trackingNo:
        type: string
      updateBy:
        description: CreateDate  *time.Time `json:"createDate" db:"CreateDate"` //
          MSSQL GetDate()
        type: string
      warehouseID:
        type: integer
    type: object
  request.BeforeReturnOrderLine:
    properties:
      alterSKU:
        type: string
      confirmBy:
        description: CreateDate *time.Time `json:"createDate" db:"CreateDate"` //
          MSSQL GetDate()
        type: string
      createBy:
        type: string
      itemName:
        type: string
      orderNo:
        description: "RecID\t\t  int        `json:\"recID\" db:\"RecID\"` // (PK -
          Auto Increment)"
        type: string
      price:
        type: number
      qty:
        type: integer
      returnQty:
        type: integer
      sku:
        type: string
      trackingNo:
        type: string
      updateBy:
        type: string
    type: object
  request.CancelSaleReturnRequest:
    properties:
      remark:
        description: |-
          OrderNo      string `json:"orderNo" db:"OrderNo"`
          CancelStatus bool   `json:"cancelStatus" db:"CancelStatus"`
        type: string
    type: object
  request.CodeRRequest:
    properties:
      createBy:
        type: string
      itemName:
        type: string
      orderNo:
        type: string
      price:
        type: number
      qty:
        type: integer
      returnQty:
        type: integer
      sku:
        type: string
    type: object
  request.ConfirmToReturnRequest:
    properties:
      importLinesActual:
        description: รายการสินค้าที่ผ่านการเช็คแล้วจากบัญชี
        items:
          $ref: '#/definitions/request.ImportLinesActual'
        type: array
      updateToReturn:
        description: เลข sr สุ่มจาก ax
        items:
          $ref: '#/definitions/request.UpdateToReturn'
        type: array
    type: object
  request.ConfirmTradeReturnRequest:
    properties:
      importLines:
        description: รายการสินค้า
        items:
          $ref: '#/definitions/request.TradeReturnLineRequest'
        type: array
    required:
    - importLines
    type: object
  request.CreateReturnOrder:
    properties:
      ReturnOrderLine:
        items:
          $ref: '#/definitions/request.ReturnOrderLine'
        type: array
      axStatusId:
        example: 1
        type: integer
      cancelId:
        example: 1
        type: integer
      channelId:
        example: 2
        type: integer
      description:
        example: ""
        type: string
      optStatusId:
        example: 1
        type: integer
      orderNo:
        example: ORD0001
        type: string
      platfId:
        example: 1
        type: integer
      platfStatusId:
        example: 1
        type: integer
      reason:
        type: string
      soNo:
        example: SO0001
        type: string
      srNo:
        example: SR0001
        type: string
      statusCheckId:
        example: 1
        type: integer
      trackingNo:
        example: 12345678TH
        type: string
    type: object
  request.ImportLinesActual:
    properties:
      actualQty:
        type: integer
      price:
        type: number
      sku:
        type: string
      statusDelete:
        type: boolean
    type: object
  request.LoginLark:
    properties:
      userID:
        example: DC65060
        type: string
      userName:
        example: eknarin.ler
        type: string
    type: object
  request.LoginWeb:
    properties:
      password:
        description: change password lastest in 17 January 2025
        example: EKna1234
        type: string
      userName:
        example: eknarin.ler
        type: string
    type: object
  request.ReturnOrderLine:
    properties:
      price:
        example: 199.99
        type: number
      qty:
        example: 5
        type: integer
      returnQTY:
        example: 5
        type: integer
      sku:
        example: SKU12345
        type: string
    type: object
  request.TradeReturnLine:
    properties:
      tradeReturnLine:
        items:
          $ref: '#/definitions/request.TradeReturnLineRequest'
        type: array
    type: object
  request.TradeReturnLineRequest:
    properties:
      filePath:
        description: CreateDate *time.Time `json:"createDate" db:"CreateDate"` //
          MSSQL GetDate()
        type: string
      imageTypeID:
        type: integer
      itemName:
        type: string
      price:
        type: number
      qty:
        type: integer
      returnQty:
        type: integer
      sku:
        type: string
    required:
    - filePath
    - imageTypeID
    - itemName
    - price
    - qty
    - returnQty
    - sku
    type: object
  request.UpdateReturnOrder:
    properties:
      axStatusId:
        example: 1
        type: integer
      cancelId:
        example: 1
        type: integer
      channelId:
        example: 2
        type: integer
      checkBy:
        example: dev03
        type: string
      description:
        example: ""
        type: string
      optStatusId:
        example: 1
        type: integer
      platfId:
        example: 1
        type: integer
      platfStatusId:
        example: 1
        type: integer
      reason:
        example: CHANGE PRODUCTS
        type: string
      srNo:
        example: SR0001
        type: string
      statusCheckId:
        example: 1
        type: integer
      trackingNo:
        example: 12345678TH
        type: string
    type: object
  request.UpdateSaleReturnRequest:
    properties:
      srNo:
        example: SR-TEST-123456
        type: string
    required:
    - srNo
    type: object
  request.UpdateToReturn:
    properties:
      srNo:
        type: string
    type: object
  response.BeforeReturnOrderLineResponse:
    properties:
      createDate:
        type: string
      itemName:
        type: string
      orderNo:
        type: string
      price:
        type: number
      qty:
        type: integer
      returnQty:
        type: integer
      sku:
        type: string
      trackingNo:
        type: string
    type: object
  response.BeforeReturnOrderResponse:
    properties:
      beforeReturnOrderLines:
        items:
          $ref: '#/definitions/response.BeforeReturnOrderLineResponse'
        type: array
      cancelId:
        type: integer
      channelId:
        type: integer
      confirmBy:
        type: string
      confirmDate:
        type: string
      createBy:
        type: string
      createDate:
        type: string
      customerId:
        type: string
      logistic:
        type: string
      mkpStatusId:
        type: integer
      orderNo:
        type: string
      reason:
        type: string
      returnDate:
        type: string
      soNo:
        type: string
      soStatusId:
        type: integer
      srNo:
        type: string
      statusConfId:
        type: integer
      statusReturnId:
        type: integer
      trackingNo:
        type: string
      updateBy:
        type: string
      updateDate:
        type: string
      warehouseId:
        type: integer
    type: object
  response.CancelSaleReturnResponse:
    properties:
      cancelBy:
        type: string
      cancelDate:
        type: string
      cancelStatus:
        type: boolean
      refId:
        type: string
      remark:
        type: string
    type: object
  response.CodeRResponse:
    properties:
      nameAlias:
        type: string
      sku:
        type: string
    type: object
  response.ConfirmReceipt:
    properties:
      identifier:
        type: string
      statusCheckID:
        type: string
      statusReturnID:
        type: string
      updateBy:
        type: string
      updateDate:
        type: string
    type: object
  response.ConfirmSaleReturnResponse:
    properties:
      confirmBy:
        type: string
      confirmDate:
        type: string
      orderNo:
        type: string
    type: object
  response.ConfirmToReturnOrder:
    properties:
      orderNo:
        type: string
      statusCheckID:
        type: string
      statusReturnID:
        type: string
      updateBy:
        type: string
      updateDate:
        type: string
    type: object
  response.CreateReturnOrder:
    properties:
      ReturnOrderLine:
        items:
          $ref: '#/definitions/response.ReturnOrderLine'
        type: array
      axStatusId:
        example: 1
        type: integer
      cancelId:
        example: 1
        type: integer
      channelId:
        example: 2
        type: integer
      createBy:
        type: string
      createDate:
        description: MSSQL SYSDATETIME() function
        type: string
      description:
        example: ""
        type: string
      optStatusId:
        example: 1
        type: integer
      orderNo:
        example: ORD0001
        type: string
      platfId:
        example: 1
        type: integer
      platfStatusId:
        example: 1
        type: integer
      reason:
        type: string
      soNo:
        example: SO0001
        type: string
      srNo:
        example: SR0001
        type: string
      statusCheckId:
        example: 1
        type: integer
      trackingNo:
        example: 12345678TH
        type: string
    type: object
  response.DeleteReturnOrder:
    properties:
      orderNo:
        type: string
    type: object
  response.DraftHeadResponse:
    properties:
      orderLines:
        items:
          $ref: '#/definitions/response.DraftLineResponse'
        type: array
      orderNo:
        type: string
      soNo:
        type: string
      srNo:
        type: string
    type: object
  response.DraftLineResponse:
    properties:
      itemName:
        type: string
      price:
        type: number
      qty:
        type: integer
      sku:
        type: string
    type: object
  response.ImageResponse:
    properties:
      filePath:
        type: string
      imageID:
        type: integer
    type: object
  response.ImportOrderLineResponse:
    properties:
      itemName:
        type: string
      price:
        type: number
      qty:
        type: integer
      sku:
        type: string
    type: object
  response.ImportOrderResponse:
    properties:
      createDate:
        type: string
      orderLines:
        items:
          $ref: '#/definitions/response.ImportOrderLineResponse'
        type: array
      orderNo:
        type: string
      soNo:
        type: string
      trackingNo:
        type: string
    type: object
  response.ListDraftConfirmOrdersResponse:
    properties:
      channelId:
        type: integer
      createDate:
        type: string
      customerId:
        type: string
      logistic:
        type: string
      orderNo:
        type: string
      soNo:
        type: string
      srNo:
        type: string
      trackingNo:
        type: string
      warehouseId:
        type: integer
    type: object
  response.Login:
    properties:
      department:
        example: G07
        type: string
      fullNameTH:
        example: Firstname Lastname
        type: string
      nickName:
        example: Nickname
        type: string
      platform:
        example: Platform
        type: string
      roleID:
        example: 0
        type: integer
      userID:
        example: DC-XXXXX
        type: string
      userName:
        example: userName
        type: string
    type: object
  response.OrderDetail:
    properties:
      OrderHeadDetail:
        description: json => OrderHeadDetail[ OrderLineDetail[ {},{},..] ]
        items:
          $ref: '#/definitions/response.OrderHeadDetail'
        type: array
    type: object
  response.OrderHeadDetail:
    properties:
      OrderLineDetail:
        items:
          $ref: '#/definitions/response.OrderLineDetail'
        type: array
      orderNo:
        description: เลขที่ใบสั่งซื้อ
        type: string
      salesStatus:
        description: สถานะการขาย
        type: string
      soNo:
        description: เลขที่ใบสั่งขาย
        type: string
      statusMKP:
        description: สถานะในตลาด
        type: string
    type: object
  response.OrderLineDetail:
    properties:
      itemName:
        description: ชื่อสินค้า
        type: string
      price:
        description: ราคาต่อหน่วย
        type: number
      qty:
        description: จำนวนสินค้า
        type: integer
      sku:
        description: รหัสสินค้า
        type: string
    type: object
  response.ReturnOrder:
    properties:
      ReturnOrderLine:
        items:
          $ref: '#/definitions/response.ReturnOrderLine'
        type: array
      axStatusId:
        type: integer
      cancelId:
        type: integer
      channelId:
        type: integer
      checkBy:
        type: string
      checkDate:
        type: string
      createBy:
        type: string
      createDate:
        type: string
      description:
        type: string
      optStatusId:
        type: integer
      orderNo:
        type: string
      platfId:
        type: integer
      platfStatusId:
        type: integer
      reason:
        type: string
      soNo:
        type: string
      srNo:
        type: string
      statusCheckId:
        type: integer
      trackingNo:
        type: string
      updateBy:
        type: string
      updateDate:
        type: string
    type: object
  response.ReturnOrderLine:
    properties:
      actualQTY:
        type: integer
      alterSKU:
        type: string
      createBy:
        type: string
      createDate:
        type: string
      orderNo:
        type: string
      price:
        type: number
      qty:
        type: integer
      returnQTY:
        type: integer
      sku:
        type: string
      trackingNo:
        type: string
      updateBy:
        type: string
      updateDate:
        type: string
    type: object
  response.SaleOrderLineResponse:
    properties:
      itemName:
        type: string
      orderNo:
        type: string
      price:
        type: number
      qty:
        type: integer
      sku:
        type: string
      soNo:
        type: string
    type: object
  response.SaleOrderResponse:
    properties:
      createDate:
        type: string
      orderLines:
        items:
          $ref: '#/definitions/response.SaleOrderLineResponse'
        type: array
      orderNo:
        type: string
      salesStatus:
        type: string
      soNo:
        type: string
      statusMKP:
        type: string
    type: object
  response.UpdateReturnOrder:
    properties:
      axStatusId:
        example: 1
        type: integer
      cancelId:
        example: 1
        type: integer
      channelId:
        example: 2
        type: integer
      checkBy:
        example: dev03
        type: string
      checkDate:
        type: string
      description:
        example: ""
        type: string
      optStatusId:
        example: 1
        type: integer
      platfId:
        example: 1
        type: integer
      platfStatusId:
        example: 1
        type: integer
      reason:
        type: string
      srNo:
        example: SR0001
        type: string
      statusCheckId:
        example: 1
        type: integer
      trackingNo:
        example: 12345678TH
        type: string
      updateBy:
        type: string
      updateDate:
        description: MSSQL SYSDATETIME() function
        type: string
    type: object
  response.UserPermission:
    properties:
      departmentNo:
        type: string
      description:
        type: string
      fullNameTH:
        type: string
      nickName:
        type: string
      password:
        type: string
      permission:
        type: string
      roleID:
        type: integer
      roleName:
        type: string
      userID:
        type: string
      userName:
        type: string
    type: object
info:
  contact: {}
  description: This is a Return Order Management Service API server.
  title: Return Order Management Service API ⭐
  version: "1.0"
paths:
  /auth:
    get:
      consumes:
      - application/json
      description: A test endpoint to check if the user is authenticated and to demonstrate
        Swagger documentation.
      operationId: check-authentication
      produces:
      - application/json
      responses:
        "200":
          description: Authenticated user details
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  additionalProperties: true
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Check Authentication
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Handles user login requests and generates a token for the authenticated
        user.
      operationId: user-login
      parameters:
      - description: User login credentials in JSON format
        in: body
        name: login-request
        required: true
        schema:
          $ref: '#/definitions/request.LoginWeb'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: User Login
      tags:
      - Auth
  /auth/login-lark:
    post:
      consumes:
      - application/json
      description: Handles user login requests and generates a token for the authenticated
        user.
      operationId: user-login-lark
      parameters:
      - description: User login from lark credentials from Lark in JSON format
        in: body
        name: Login-request-lark
        required: true
        schema:
          $ref: '#/definitions/request.LoginLark'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: User Lark Login
      tags:
      - Auth
  /auth/logout:
    post:
      description: Logs out the user by deleting the JWT token.
      operationId: user-logout
      responses:
        "200":
          description: Logout successful
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: User Logout
      tags:
      - Auth
  /before-return-order/{orderNo}:
    get:
      consumes:
      - application/json
      description: Retrieve the details of a specific return order by its order number
      operationId: get-before-return-order-by-order-no
      parameters:
      - description: Order number
        in: path
        name: orderNo
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get return order by order number
      tags:
      - Before Return Order
  /before-return-order/create:
    post:
      consumes:
      - application/json
      description: Create a new return order with the provided details
      operationId: create-before-return-order-with-lines
      parameters:
      - description: Before return order details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.BeforeReturnOrder'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Create a new return order with lines
      tags:
      - Before Return Order
  /before-return-order/delete-befodline/{recID}:
    delete:
      consumes:
      - application/json
      description: Delete an order line
      operationId: delete-BeforeReturnOrderLine
      parameters:
      - description: Rec ID
        in: path
        name: recID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Before ReturnOrderLine Deleted
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  type: string
              type: object
        "404":
          description: Order Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "422":
          description: Validation Error
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Delete Order line
      tags:
      - Before Return Order
  /before-return-order/get-order:
    get:
      consumes:
      - application/json
      description: Get all Before Return Order
      operationId: Allget-BefReturnOrder
      produces:
      - application/json
      responses:
        "200":
          description: Get All
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/response.OrderDetail'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: not found endpoint
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Before Return Order
      tags:
      - Before Return Order
  /before-return-order/get-orderbySO/{soNo}:
    get:
      consumes:
      - application/json
      description: Get details of an order by its SO number
      operationId: GetBySO-BefReturnOrder
      parameters:
      - description: soNo
        in: path
        name: soNo
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get by SO
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/response.OrderDetail'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: not found endpoint
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Before Return Order by SO
      tags:
      - Before Return Order
  /before-return-order/get-orders:
    get:
      consumes:
      - application/json
      description: Get all Before Return Order with pagination
      operationId: Get-BefReturnOrder-Paginated
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        type: integer
      - default: 10
        description: Page size
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Get Paginated Orders
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/response.OrderDetail'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Paginated Before Return Order
      tags:
      - Before Return Order
  /before-return-order/line/{orderNo}:
    get:
      consumes:
      - application/json
      description: Retrieve the details of all return order lines by order number
      operationId: get-before-return-order-line-by-order-no
      parameters:
      - description: Order number
        in: path
        name: orderNo
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get return order lines by order number
      tags:
      - Before Return Order
  /before-return-order/list-lines:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all return order lines
      operationId: list-before-return-order-lines
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: List all return order lines
      tags:
      - Before Return Order
  /before-return-order/list-orders:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all before return orders
      operationId: list-before-return-orders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: List all return orders
      tags:
      - Before Return Order
  /before-return-order/update/{orderNo}:
    patch:
      consumes:
      - application/json
      description: Update an existing return order with the provided details
      operationId: update-return-order-with-lines
      parameters:
      - description: Order number
        in: path
        name: orderNo
        required: true
        type: string
      - description: Before return order details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.BeforeReturnOrder'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Update an existing return order with lines
      tags:
      - Before Return Order
  /constants/get-district:
    get:
      consumes:
      - application/json
      description: Get all Thai District.
      operationId: get-district
      produces:
      - application/json
      responses:
        "200":
          description: District
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.District'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: District not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Thai District
      tags:
      - Constants
  /constants/get-productAll:
    get:
      consumes:
      - application/json
      description: Get all product
      operationId: get-productAll
      produces:
      - application/json
      responses:
        "200":
          description: Product
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.ROM_V_ProductAll'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: SubDistrict not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get ProductAll
      tags:
      - Constants
  /constants/get-productAlls:
    get:
      consumes:
      - application/json
      description: Get paginated products
      operationId: get-productAll-paginated
      parameters:
      - default: 1
        description: Page number
        in: query
        name: page
        required: true
        type: integer
      - default: 10
        description: Limit per page
        in: query
        name: limit
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Paginated Product List
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                ' total':
                  type: integer
                result:
                  items:
                    $ref: '#/definitions/entity.ROM_V_ProductAll'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get ProductAll with Pagination
      tags:
      - Constants
  /constants/get-province:
    get:
      consumes:
      - application/json
      description: Get all Thai Province.
      operationId: get-province
      produces:
      - application/json
      responses:
        "200":
          description: Province
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.Province'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Province not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Thai Province
      tags:
      - Constants
  /constants/get-sub-district:
    get:
      consumes:
      - application/json
      description: Get all Thai SubDistrict.
      operationId: get-sub-district
      produces:
      - application/json
      responses:
        "200":
          description: SubDistrict
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.SubDistrict'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: SubDistrict not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Thai SubDistrict
      tags:
      - Constants
  /constants/get-warehouse:
    get:
      consumes:
      - application/json
      description: Get Warehouse
      operationId: get-warehouse
      produces:
      - application/json
      responses:
        "200":
          description: Warehouse
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.Warehouse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: SubDistrict not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Warehouse
      tags:
      - Constants
  /draft-confirm/code-r:
    post:
      consumes:
      - application/json
      description: Add a new CodeR entry
      operationId: add-code-r
      parameters:
      - description: CodeR details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.CodeRRequest'
      produces:
      - application/json
      responses:
        "201":
          description: CodeR added successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.DraftLineResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Add CodeR
      tags:
      - Draft & Confirm
  /draft-confirm/code-r/{orderNo}/{sku}:
    delete:
      consumes:
      - application/json
      description: Delete a CodeR entry by SKU and OrderNo
      operationId: delete-code-r
      parameters:
      - description: Order number
        in: path
        name: orderNo
        required: true
        type: string
      - description: SKU
        in: path
        name: sku
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: CodeR deleted successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Delete CodeR
      tags:
      - Draft & Confirm
  /draft-confirm/detail/{orderNo}:
    get:
      consumes:
      - application/json
      description: Retrieve the details of a specific draft order by its order number
      operationId: get-draft-order-by-order-no
      parameters:
      - description: Order number
        in: path
        name: orderNo
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Draft order retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.DraftHeadResponse'
                  type: array
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get draft order by order number
      tags:
      - Draft & Confirm
  /draft-confirm/list-code-r:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all codeR
      operationId: list-code-r
      produces:
      - application/json
      responses:
        "200":
          description: CodeR retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.CodeRResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: List all CodeR
      tags:
      - Draft & Confirm
  /draft-confirm/list-confirms:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all confirm orders
      operationId: list-confirm-orders
      produces:
      - application/json
      responses:
        "200":
          description: All Confirm orders retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.ListDraftConfirmOrdersResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Confirm orders not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: List all confirm orders
      tags:
      - Draft & Confirm
  /draft-confirm/list-drafts:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all draft orders
      operationId: list-draft-orders
      produces:
      - application/json
      responses:
        "200":
          description: All Draft orders retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.ListDraftConfirmOrdersResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Draft orders not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: List all draft orders
      tags:
      - Draft & Confirm
  /draft-confirm/update-draft/{orderNo}:
    patch:
      consumes:
      - application/json
      description: Update draft orders and change status to Confirm and Booking
      operationId: update-draft-orders
      parameters:
      - description: Order number
        in: path
        name: orderNo
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Draft orders updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.DraftHeadResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Update draft orders
      tags:
      - Draft & Confirm
  /import-order/search:
    get:
      consumes:
      - application/json
      description: Retrieve the details of an order by its OrderNo or TrackingNo using
        a single input
      operationId: search-orderNo-or-trackingNo-single
      parameters:
      - description: OrderNo or TrackingNo
        in: query
        name: search
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  $ref: '#/definitions/response.ImportOrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: OrderNo or TrackingNo not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Search order by OrderNo or TrackingNo
      tags:
      - Import Order
  /import-order/upload:
    post:
      consumes:
      - multipart/form-data
      description: Upload multiple images and data for a specific SoNo
      operationId: Import-Order
      parameters:
      - description: Sale Order Number
        in: formData
        name: soNo
        required: true
        type: string
      - description: Type of the image (1, 2, or 3)
        in: formData
        name: imageTypeID
        required: true
        type: integer
      - description: SKU (Optional)
        in: formData
        name: sku
        type: string
      - description: Files to upload
        in: formData
        name: files
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Successful
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  $ref: '#/definitions/response.ImageResponse'
              type: object
        "400":
          description: Invalid input
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Import order
      tags:
      - Import Order
  /return-order/create:
    post:
      consumes:
      - application/json
      description: Create a new return order
      operationId: Create-ReturnOrder
      parameters:
      - description: Return Order
        in: body
        name: CreateReturnOrder
        required: true
        schema:
          $ref: '#/definitions/request.CreateReturnOrder'
      produces:
      - application/json
      responses:
        "200":
          description: Return Order Created
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/response.CreateReturnOrder'
                  type: array
              type: object
        "201":
          description: Return Order Created
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/response.CreateReturnOrder'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Create Return Order
      tags:
      - Return Order
  /return-order/delete/{orderNo}:
    delete:
      consumes:
      - application/json
      description: Delete an order
      operationId: delete-ReturnOrder
      parameters:
      - description: Order No
        in: path
        name: orderNo
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: ReturnOrder Deleted
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/response.DeleteReturnOrder'
                  type: array
              type: object
        "204":
          description: No Content, Order Delete Successfully
          schema:
            $ref: '#/definitions/api.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Order Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Delete Order
      tags:
      - Return Order
  /return-order/get-all:
    get:
      consumes:
      - application/json
      description: Retrieve the details of Return Order
      operationId: GetAll-ReturnOrder
      produces:
      - application/json
      responses:
        "200":
          description: Get All
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/response.ReturnOrder'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Not Found Endpoint
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Return Order
      tags:
      - Return Order
  /return-order/get-all/{orderNo}:
    get:
      consumes:
      - application/json
      description: Get details return order by order no
      operationId: GetAllByOrderNo-ReturnOrder
      parameters:
      - description: Order No
        in: path
        name: orderNo
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get All by OrderNo
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/response.ReturnOrder'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Not Found Endpoint
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Return Order by OrderNo
      tags:
      - Return Order
  /return-order/get-lines:
    get:
      consumes:
      - application/json
      description: Get all Return Order Line
      operationId: GetAllLines-ReturnOrderLine
      produces:
      - application/json
      responses:
        "200":
          description: Get Return Order Lines
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/response.ReturnOrderLine'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Not Found Endpoint
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Return Order Line
      tags:
      - Return Order
  /return-order/get-lines/{orderNo}:
    get:
      consumes:
      - application/json
      description: Get details of an order line by its order no
      operationId: GetLineByID-ReturnOrder
      parameters:
      - description: Order No
        in: path
        name: orderNo
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get Lines by OrderNo
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/response.ReturnOrderLine'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Not Found Endpoint
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Return Order Line by OrderNo
      tags:
      - Return Order
  /return-order/update/{orderNo}:
    patch:
      consumes:
      - application/json
      description: Update an existing return order using orderNo in the path
      operationId: Update-ReturnOrder
      parameters:
      - description: Order No
        in: path
        name: orderNo
        required: true
        type: string
      - description: Updated Order Data
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/request.UpdateReturnOrder'
      produces:
      - application/json
      responses:
        "200":
          description: Return Order Update
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/response.UpdateReturnOrder'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Order Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Update Return Order
      tags:
      - Return Order
  /sale-return/cancel/{orderNo}:
    post:
      consumes:
      - application/json
      description: Cancel a sale return order based on the provided details
      operationId: cancel-sale-return
      parameters:
      - description: Order number
        in: path
        name: orderNo
        required: true
        type: string
      - description: Cancel Sale Return
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.CancelSaleReturnRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Sale return order canceled successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.CancelSaleReturnResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Cancel a sale return order
      tags:
      - Sale Return
  /sale-return/confirm/{orderNo}:
    post:
      consumes:
      - application/json
      description: Confirm a sale return order based on the provided details
      operationId: confirm-sale-return
      parameters:
      - description: Order number
        in: path
        name: orderNo
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Sale return order confirmed successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.ConfirmSaleReturnResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Confirm a sale return order
      tags:
      - Sale Return
  /sale-return/create:
    post:
      consumes:
      - application/json
      description: Create a new sale return order based on the provided details
      operationId: create-sale-return
      parameters:
      - description: Sale Return Order
        in: body
        name: saleReturn
        required: true
        schema:
          $ref: '#/definitions/request.BeforeReturnOrder'
      produces:
      - application/json
      responses:
        "200":
          description: Sale return order created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.BeforeReturnOrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Create a new sale return order
      tags:
      - Sale Return
  /sale-return/search:
    get:
      consumes:
      - application/json
      description: Retrieve the details of a order by its SO number or Order number
      operationId: search-order
      parameters:
      - description: SO number
        in: query
        name: soNo
        type: string
      - description: Order number
        in: query
        name: orderNo
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Order retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.SaleOrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Sale order not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Search order by SO number or Order number
      tags:
      - Sale Return
  /sale-return/update/{orderNo}:
    patch:
      consumes:
      - application/json
      description: Update the SR number for a sale return order based on the provided
        details
      operationId: update-sale-return
      parameters:
      - description: Order number
        in: path
        name: orderNo
        required: true
        type: string
      - description: SR number details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.UpdateSaleReturnRequest'
      produces:
      - application/json
      responses:
        "200":
          description: SR number updated successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.BeforeReturnOrderResponse'
              type: object
        "400":
          description: Bad Request - Invalid input or missing required fields
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized - Missing or invalid token
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Not Found - Order not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Update the SR number for a sale return order
      tags:
      - Sale Return
  /trade-return/add-line/{orderNo}:
    post:
      consumes:
      - application/json
      description: Add a new trade return line based on the provided order number
        and line details
      operationId: add-trade-return-line
      parameters:
      - description: Order number
        in: path
        name: orderNo
        required: true
        type: string
      - description: Trade Return Line Details
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.TradeReturnLine'
      produces:
      - application/json
      responses:
        "201":
          description: Trade return line created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  $ref: '#/definitions/response.BeforeReturnOrderLineResponse'
              type: object
        "400":
          description: Bad Request - Invalid input or missing required fields
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Not Found - Order not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Add a new trade return line to an existing order
      tags:
      - Trade Return
  /trade-return/confirm-receipt/{identifier}:
    post:
      consumes:
      - application/json
      description: Confirm a trade return order based on the provided identifier (OrderNo
        or TrackingNo) and input lines for ReturnOrderLine.
      operationId: confirm-trade-return
      parameters:
      - description: OrderNo or TrackingNo
        in: path
        name: identifier
        required: true
        type: string
      - description: Trade return request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ConfirmTradeReturnRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Trade return order confirmed successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  $ref: '#/definitions/response.ConfirmReceipt'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Confirm Receipt from Ware House
      tags:
      - Trade Return
  /trade-return/confirm-return/{orderNo}:
    patch:
      consumes:
      - application/json
      description: Confirm a trade return order based on the provided order number
        (OrderNo) and input lines for ReturnOrderLine.
      operationId: confirm-to-return
      parameters:
      - description: OrderNo
        in: path
        name: orderNo
        required: true
        type: string
      - description: Updated trade return request details
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/request.ConfirmToReturnRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Trade return order confirmed successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  $ref: '#/definitions/response.ConfirmToReturnOrder'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Confirm Return Order to Success
      tags:
      - Trade Return
  /trade-return/create-trade:
    post:
      consumes:
      - application/json
      description: Create a new trade return order with multiple order lines
      operationId: create-trade-return
      parameters:
      - description: Trade Return Detail
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.BeforeReturnOrder'
      produces:
      - application/json
      responses:
        "201":
          description: Trade return created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  $ref: '#/definitions/response.BeforeReturnOrderResponse'
              type: object
        "400":
          description: Bad Request - Invalid input or missing required fields
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Not Found - Order not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Create a new trade return order
      tags:
      - Trade Return
  /user/get-user:
    post:
      consumes:
      - application/json
      description: Retrieve the details of a user by their userid and username
      operationId: get-user
      parameters:
      - description: User login credentials in JSON format
        in: body
        name: Login
        required: true
        schema:
          $ref: '#/definitions/request.LoginLark'
      produces:
      - application/json
      responses:
        "200":
          description: User retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.Login'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get user by userid and username
      tags:
      - User
  /user/get-user-with-permission:
    post:
      consumes:
      - application/json
      description: Retrieve the details of a user with permissions by their username
        and password
      operationId: get-user-with-permission
      parameters:
      - description: User login credentials in JSON format
        in: body
        name: Login
        required: true
        schema:
          $ref: '#/definitions/request.LoginLark'
      produces:
      - application/json
      responses:
        "200":
          description: User with permissions retrieved successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.UserPermission'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get user with permissions by username and password
      tags:
      - User
swagger: "2.0"
