basePath: /api
definitions:
  api.Response:
    properties:
      data: {}
      message:
        type: string
      success:
        type: boolean
    type: object
  gin.H:
    additionalProperties: {}
    type: object
  request.LoginLark:
    properties:
      userID:
        example: DC65060
        type: string
      userName:
        example: eknarin.ler
        type: string
    type: object
  request.LoginWeb:
    properties:
      password:
        description: change password lastest in 17 January 2025
        example: EKna1234
        type: string
      userName:
        example: eknarin.ler
        type: string
    type: object
  response.SearchOrderItem:
    properties:
      itemName:
        type: string
      price:
        type: number
      qty:
        type: integer
      sku:
        type: string
    type: object
  response.SearchOrderResponse:
    properties:
      createDate:
        type: string
      items:
        items:
          $ref: '#/definitions/response.SearchOrderItem'
        type: array
      orderNo:
        type: string
      salesStatus:
        type: string
      soNo:
        type: string
      statusMKP:
        type: string
    type: object
  response.User:
    properties:
      departmentNo:
        type: string
      fullNameTH:
        type: string
      nickName:
        type: string
      platform:
        type: string
      roleID:
        type: integer
      userID:
        type: string
      userName:
        type: string
    type: object
  response.UserRole:
    properties:
      departmentNo:
        type: string
      description:
        type: string
      fullNameTH:
        type: string
      nickName:
        type: string
      permission:
        type: string
      roleID:
        type: integer
      roleName:
        type: string
      userID:
        type: string
      userName:
        type: string
    type: object
info:
  contact: {}
  description: This is a Return Order Management Service API server.
  title: Return Order Management Service ‚≠ê
  version: "1.0"
paths:
  /auth:
    get:
      description: Validates if the JWT token is valid and retrieves user claims.
      responses:
        "200":
          description: Authenticated user details
          schema:
            $ref: '#/definitions/api.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
      summary: Check Authentication
      tags:
      - Authentication
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticates user credentials and generates a JWT token.
      parameters:
      - description: User login credentials
        in: body
        name: login-request
        required: true
        schema:
          $ref: '#/definitions/request.LoginWeb'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            $ref: '#/definitions/response.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: User Login
      tags:
      - Authentication
  /auth/login-lark:
    post:
      consumes:
      - application/json
      description: Authenticates user credentials from Lark and generates a JWT token.
      parameters:
      - description: User login from Lark
        in: body
        name: login-request
        required: true
        schema:
          $ref: '#/definitions/request.LoginLark'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            $ref: '#/definitions/response.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: User Lark Login
      tags:
      - Authentication
  /auth/logout:
    post:
      description: Logs the user out by removing the JWT token from the cookie.
      responses:
        "200":
          description: Logout successful
          schema:
            $ref: '#/definitions/api.Response'
      summary: User Logout
      tags:
      - Authentication
  /order/search:
    get:
      consumes:
      - application/json
      description: Retrieve the details of an order by its SO number or Order number
      operationId: search-order
      parameters:
      - description: SO number
        in: query
        name: soNo
        type: string
      - description: Order number
        in: query
        name: orderNo
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                data:
                  $ref: '#/definitions/response.SearchOrderResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Search order by SO number or Order number
      tags:
      - Return Order MKP
  /user/{username}:
    get:
      description: Get user credentials by userName
      parameters:
      - description: UserName
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: User credentials
          schema:
            $ref: '#/definitions/response.UserRole'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/gin.H'
      summary: Get User Credentials
      tags:
      - User
swagger: "2.0"
