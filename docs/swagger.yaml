basePath: /api
definitions:
  api.Response:
    properties:
      message:
        type: string
      result: {}
      success:
        type: boolean
    type: object
  dto.EditTTFCustomer:
    properties:
      address:
        type: string
      customerName:
        type: string
      district:
        type: string
      phone:
        type: string
      postCode:
        type: string
      province:
        type: string
      subDistrict:
        type: string
      ttfNumber:
        type: string
    type: object
  dto.EditTTFDocument:
    properties:
      descs:
        type: string
      descsRemark:
        type: string
      locationFrom:
        type: string
      locationTo:
        type: string
      logisticType:
        type: integer
      refOrder:
        type: string
      reqType:
        type: string
      siteFrom:
        type: string
      siteTo:
        type: string
      trackingNumber:
        type: string
      ttfID:
        type: string
      ttfNumber:
        type: string
      userCreated:
        type: string
      warehouseFrom:
        type: string
      warehouseTo:
        type: string
    type: object
  dto.EditTTFItem:
    properties:
      descsItem:
        type: string
      price:
        type: number
      qtyOrder:
        type: integer
      sizeID:
        type: integer
      sizeName:
        type: string
      sku:
        type: string
      skuName:
        type: string
      ttfID:
        type: string
      ttfNumber:
        type: string
    type: object
  dto.GetAllTTF:
    properties:
      head:
        items:
          $ref: '#/definitions/dto.GetHead'
        type: array
    type: object
  dto.GetCustomer:
    properties:
      address:
        type: string
      customerName:
        type: string
      district:
        type: string
      phone:
        type: string
      postCode:
        type: string
      province:
        type: string
      subDistrict:
        type: string
      ttfNumber:
        type: string
    type: object
  dto.GetHead:
    properties:
      approveID:
        type: integer
      approveName:
        type: string
      createdAt:
        type: string
      descs:
        type: string
      descsRemark:
        type: string
      journalID:
        type: string
      locationFrom:
        type: string
      locationTo:
        type: string
      logisType:
        type: integer
      logisTypeName:
        type: string
      oprID:
        type: integer
      oprName:
        type: string
      refOrder:
        type: string
      reqType:
        type: string
      siteFrom:
        type: string
      siteTo:
        type: string
      trackingNumber:
        type: string
      ttfID:
        type: string
      ttfNumber:
        type: string
      types:
        type: string
      userCreated:
        type: string
      warehouseFrom:
        type: string
      warehouseTo:
        type: string
    type: object
  dto.GetLine:
    properties:
      descsItem:
        type: string
      price:
        type: number
      qtyOrder:
        type: integer
      sizeID:
        type: integer
      sizeName:
        type: string
      sku:
        type: string
      skuName:
        type: string
      ttfID:
        type: string
      ttfNumber:
        type: string
    type: object
  dto.GetTTFBy:
    properties:
      customer:
        $ref: '#/definitions/dto.GetCustomer'
      head:
        $ref: '#/definitions/dto.GetHead'
      line:
        items:
          $ref: '#/definitions/dto.GetLine'
        type: array
    type: object
  dto.InputCreateDoc:
    properties:
      customer:
        $ref: '#/definitions/dto.TTFCustomer'
      head:
        $ref: '#/definitions/dto.TTFDocument'
      line:
        items:
          $ref: '#/definitions/dto.TTFItem'
        type: array
    type: object
  dto.InputEditDoc:
    properties:
      customer:
        $ref: '#/definitions/dto.EditTTFCustomer'
      head:
        $ref: '#/definitions/dto.EditTTFDocument'
      line:
        items:
          $ref: '#/definitions/dto.EditTTFItem'
        type: array
    type: object
  dto.TTFCustomer:
    properties:
      address:
        type: string
      customerName:
        type: string
      district:
        type: string
      phone:
        type: string
      postCode:
        type: string
      province:
        type: string
      subDistrict:
        type: string
    type: object
  dto.TTFDocument:
    properties:
      descs:
        type: string
      descsRemark:
        type: string
      locationFrom:
        type: string
      locationTo:
        type: string
      logisticType:
        type: integer
      refOrder:
        type: string
      reqType:
        type: string
      siteFrom:
        type: string
      siteTo:
        type: string
      trackingNumber:
        type: string
      userCreated:
        type: string
      warehouseFrom:
        type: string
      warehouseTo:
        type: string
    type: object
  dto.TTFItem:
    properties:
      descsItem:
        type: string
      price:
        type: number
      qtyOrder:
        type: integer
      sizeID:
        type: integer
      sizeName:
        type: string
      sku:
        type: string
      skuName:
        type: string
    type: object
  entity.District:
    properties:
      code:
        type: integer
      nameEN:
        type: string
      nameTH:
        type: string
      provinceCode:
        type: integer
    type: object
  entity.GetSKU:
    properties:
      qtyAvailable:
        type: integer
      sizeID:
        type: integer
      sizeName:
        type: string
      sku:
        type: string
      skuName:
        type: string
    type: object
  entity.Province:
    properties:
      code:
        type: integer
      nameEN:
        type: string
      nameTH:
        type: string
    type: object
  entity.SubDistrict:
    properties:
      code:
        type: integer
      districtCode:
        type: integer
      nameEN:
        type: string
      nameTH:
        type: string
      zipCode:
        type: string
    type: object
  entity.TypeFoc:
    properties:
      createdAt:
        type: string
      id:
        type: string
      journalType:
        type: string
      location:
        type: string
      site:
        type: string
      statusEN:
        type: string
      statusTH:
        type: string
      typeValue:
        type: integer
      warehouse:
        type: string
    type: object
  entity.TypeLogistic:
    properties:
      createdAt:
        type: string
      logisticType:
        type: integer
      nameEN:
        type: string
      nameTH:
        type: string
    type: object
  entity.TypeReqPermission:
    properties:
      journalType:
        type: string
      location:
        type: string
      nameTH:
        type: string
      permissionID:
        type: string
      reqType:
        type: string
      site:
        type: string
      typeValue:
        type: integer
      warehouse:
        type: string
    type: object
  entity.WarehouseLocation:
    properties:
      location:
        type: string
      site:
        type: string
      warehouse:
        type: string
    type: object
  service.InputLogin:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  service.InputLoginLark:
    properties:
      userID:
        type: string
      username:
        type: string
    type: object
  service.SiteWarehouseLocations:
    properties:
      site:
        type: string
      warehouseLocs:
        items:
          $ref: '#/definitions/service.WarehouseSection'
        type: array
    type: object
  service.WarehouseSection:
    properties:
      location:
        items:
          type: string
        type: array
      warehouse:
        type: string
    type: object
info:
  contact: {}
  description: This is a sample server for FOC project not Frog OOB OOB.
  title: FOC
  version: "1.0"
paths:
  /auth:
    get:
      consumes:
      - application/json
      description: A test endpoint to check if the user is authenticated and to demonstrate
        Swagger documentation.
      operationId: check-authentication
      produces:
      - application/json
      responses:
        "200":
          description: Authenticated user details
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  additionalProperties: true
                  type: object
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Check Authentication
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Handles user login requests and generates a token for the authenticated
        user.
      operationId: user-login
      parameters:
      - description: User login credentials in JSON format
        in: body
        name: login-request
        required: true
        schema:
          $ref: '#/definitions/service.InputLogin'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: User Login
      tags:
      - Auth
  /auth/login-lark:
    post:
      consumes:
      - application/json
      description: Handles user login requests and generates a token for the authenticated
        user.
      operationId: user-login-lark
      parameters:
      - description: User login from lark credentials from Lark in JSON format
        in: body
        name: Login-request-lark
        required: true
        schema:
          $ref: '#/definitions/service.InputLoginLark'
      produces:
      - application/json
      responses:
        "200":
          description: JWT token
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: User Lark Login
      tags:
      - Auth
  /auth/logout:
    post:
      description: Logs out the user by deleting the JWT token.
      operationId: user-logout
      responses:
        "200":
          description: Logout successful
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  type: string
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: User Logout
      tags:
      - Auth
  /confirm/receive:
    post:
      consumes:
      - application/json
      description: Confirm receive
      operationId: confirm-receive
      parameters:
      - description: input TTFID or trackingNo
        in: query
        name: searchWord
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: confirm receive result
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Confirm receive
      tags:
      - Confirm
  /confirm/send:
    post:
      consumes:
      - application/json
      description: Confirm send
      operationId: confirm-send
      parameters:
      - description: input TTFID or trackingNo
        in: query
        name: searchWord
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: confirm send result
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  type: string
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Confirm send
      tags:
      - Confirm
  /constants/get-district:
    get:
      consumes:
      - application/json
      description: Get all Thai District.
      operationId: get-district
      produces:
      - application/json
      responses:
        "200":
          description: District
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.District'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: District not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Thai District
      tags:
      - Constants
  /constants/get-province:
    get:
      consumes:
      - application/json
      description: Get all Thai Province.
      operationId: get-province
      produces:
      - application/json
      responses:
        "200":
          description: Province
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.Province'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Province not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Thai Province
      tags:
      - Constants
  /constants/get-sku:
    post:
      consumes:
      - application/json
      description: get sku by warehouse, location and site.
      operationId: get-sku
      parameters:
      - description: Get Sku
        in: body
        name: get-sku
        required: true
        schema:
          $ref: '#/definitions/entity.WarehouseLocation'
      produces:
      - application/json
      responses:
        "200":
          description: Get sku by warehouse, location and site
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.GetSKU'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: sku not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: get sku by warehouse, location and site
      tags:
      - Constants
  /constants/get-sub-district:
    get:
      consumes:
      - application/json
      description: Get all Thai SubDistrict.
      operationId: get-sub-district
      produces:
      - application/json
      responses:
        "200":
          description: SubDistrict
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.SubDistrict'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: SubDistrict not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Thai SubDistrict
      tags:
      - Constants
  /constants/get-type-foc:
    get:
      consumes:
      - application/json
      description: Get all Type foc.
      operationId: get-type-foc
      produces:
      - application/json
      responses:
        "200":
          description: Type FOC
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.TypeFoc'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Type Foc not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Type foc
      tags:
      - Constants
  /constants/get-type-logistic:
    get:
      consumes:
      - application/json
      description: Get all Type logistic.
      operationId: get-type-logistic
      produces:
      - application/json
      responses:
        "200":
          description: Type Logistic
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.TypeLogistic'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Type Foc not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Type logistic
      tags:
      - Constants
  /constants/get-type-req:
    get:
      consumes:
      - application/json
      description: Get all Type req.
      operationId: get-type-req
      parameters:
      - description: input Permission ID
        in: query
        name: permissionID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Type Req
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/entity.TypeReqPermission'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Type Req not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get Type req
      tags:
      - Constants
  /constants/get-warehouse-location:
    get:
      consumes:
      - application/json
      description: get warehouse & location by user's id.
      operationId: get-warehouse-location
      parameters:
      - description: User's ID
        in: query
        name: userID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Warehouse Location by user'ID
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/service.SiteWarehouseLocations'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: warehoues location not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: get warehouse & location by user's id
      tags:
      - Constants
  /ttf/create/draft:
    post:
      consumes:
      - application/json
      description: crete draft document ttf.
      operationId: ttf-create-draft
      parameters:
      - description: request body for create draft in JSON format
        in: body
        name: create-draft
        required: true
        schema:
          $ref: '#/definitions/dto.InputCreateDoc'
      produces:
      - application/json
      responses:
        "200":
          description: Return from create draft
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    type: string
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Api not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: create draft
      tags:
      - TTF
  /ttf/create/req:
    post:
      consumes:
      - application/json
      description: create rquest document ttf.
      operationId: ttf-create-request
      parameters:
      - description: request body for create draft in JSON format
        in: body
        name: create-draft
        required: true
        schema:
          $ref: '#/definitions/dto.InputCreateDoc'
      - description: request body for create draft in JSON format
        in: body
        name: create-draft
        required: true
        schema:
          $ref: '#/definitions/dto.InputCreateDoc'
      produces:
      - application/json
      responses:
        "200":
          description: Return from create draft
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    type: string
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Api not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: create request ttf
      tags:
      - TTF
  /ttf/create/ret:
    post:
      consumes:
      - application/json
      description: create return document ttf.
      operationId: ttf-create-return
      parameters:
      - description: request body for create draft in JSON format
        in: body
        name: create-draft
        required: true
        schema:
          $ref: '#/definitions/dto.InputCreateDoc'
      - description: request body for create draft in JSON format
        in: body
        name: create-draft
        required: true
        schema:
          $ref: '#/definitions/dto.InputCreateDoc'
      produces:
      - application/json
      responses:
        "200":
          description: Return from create draft
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    type: string
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Api not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: create return ttf
      tags:
      - TTF
  /ttf/edit/draft:
    post:
      consumes:
      - application/json
      description: edit draft document ttf.
      operationId: ttf-edit-draft
      parameters:
      - description: request body for edit draft in JSON format
        in: body
        name: edit-draft
        required: true
        schema:
          $ref: '#/definitions/dto.InputEditDoc'
      produces:
      - application/json
      responses:
        "200":
          description: Return from create draft
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    type: string
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Api not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: edit draft
      tags:
      - TTF
  /ttf/get-all:
    get:
      consumes:
      - application/json
      description: Get all.
      operationId: ttf-get-all
      produces:
      - application/json
      responses:
        "200":
          description: Get all document have been created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dto.GetAllTTF'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Api not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get all
      tags:
      - TTF
  /ttf/get-all/by:
    get:
      consumes:
      - application/json
      description: Get all by operation's status.
      operationId: ttf-get-all-by-opr
      parameters:
      - description: Operation's status
        in: query
        name: status
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get all document by operation's status have been created successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dto.GetAllTTF'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Api not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get all by operation's status
      tags:
      - TTF
  /ttf/get-by:
    get:
      consumes:
      - application/json
      description: Get by document's ID.
      operationId: ttf-get-by
      parameters:
      - description: Document Number
        in: query
        name: number
        required: true
        type: string
      - description: Document ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Get all document by document's ID status have been created
            successfully
          schema:
            allOf:
            - $ref: '#/definitions/api.Response'
            - properties:
                result:
                  items:
                    $ref: '#/definitions/dto.GetTTFBy'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/api.Response'
        "404":
          description: Api not found
          schema:
            $ref: '#/definitions/api.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/api.Response'
      summary: Get by document's ID
      tags:
      - TTF
swagger: "2.0"
