package api

import (
	Errors "boilerplate-back-go-2411/errors"
	"errors"
	"fmt"
	"net/http"

	// "boilerplate-back-go-2411/errors"

	"github.com/gin-gonic/gin"
	"github.com/go-playground/validator/v10"
)

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Validation Error (‡πÉ‡∏ä‡πâ‡∏Å‡∏±‡∏ö JSON Binding)
func handleValidationError(c *gin.Context, err error) {
	var errorMessages []string

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Validation Error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if validationErrors, ok := err.(validator.ValidationErrors); ok {
		for _, fieldErr := range validationErrors {
			errorMessage := fmt.Sprintf("‚ùå Field '%s' is invalid: %s", fieldErr.Field(), fieldErr.Tag())
			errorMessages = append(errorMessages, errorMessage)
		}
	} else {
		// üîπ ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô Error ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Validation Error
		errorMessages = append(errorMessages, err.Error())
	}

	// üîπ ‡∏™‡πà‡∏á Response ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î Error
	handleResponse(c, false, "‚ö†Ô∏è Invalid request body", errorMessages, http.StatusBadRequest)
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Error ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Service Layer
func handleError(c *gin.Context, err error) {
	if err == nil {
		return
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Error ‡∏°‡∏≤‡∏à‡∏≤‡∏Å Service Layer
	var appErr *Errors.AppError
	if errors.As(err, &appErr) {
		handleResponse(c, false, appErr.Message, nil, appErr.Code)
		return
	}

	// // üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Error ‡∏°‡∏≤‡∏à‡∏≤‡∏Å Service Layer ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	// if appErr, ok := err.(*Errors.AppError); ok {
	// 	handleResponse(c, false, "‚ö†Ô∏è Service error", appErr.Message, appErr.Code)
	// 	return
	// }

	// üîπ ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô Error ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡πÑ‡∏î‡πâ
	handleResponse(c, false, "üî• Internal server error", err.Error(), http.StatusInternalServerError)
}
