import { put, call, Effect, delay } from 'redux-saga/effects';
import { AxiosResponse } from 'axios';
import { notification } from 'antd';
import { AuthActionTypes, LoginPayload, LoginResponse, AuthCheckResponse } from '../../../types/auth.types';
import { authAPI } from '../../../services/api/auth.api';
import { ROUTES, ROUTES_NO_AUTH } from '../../../resources/routes';
import { windowNavigateReplaceTo } from '../../../utils/navigation';
import { ROUTE_LOGIN } from '../../../resources/routes';
import { closeLoading, openLoading } from '../../../components/alert/useAlert';
import { logger } from '../../../utils/logger';

export function* loginSaga(action: { type: AuthActionTypes; payload: LoginPayload }) {
  try {
    openLoading();
    logger.log('info', '[Auth] Starting login process');

    const response: AxiosResponse<LoginResponse> = yield call(
      authAPI.login, 
      action.payload
    );

    if (!response.data.success) {
      throw new Error(response.data.message || 'Login failed');
    }

    // ‡πÄ‡∏Å‡πá‡∏ö token ‡πÉ‡∏ô localStorage ‡πÄ‡∏õ‡πá‡∏ô backup (backend ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ cookie ‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß)
    const token = response.data.data;
    localStorage.setItem("access_token", token);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    const authResponse: AxiosResponse<AuthCheckResponse> = yield call(authAPI.checkAuth);
    const { user } = authResponse.data.data;

    yield put({ 
      type: AuthActionTypes.AUTHEN_LOGIN_SUCCESS, 
      users: user
    });

    notification.success({ 
      message: "Login Successful! üéâ",
      description: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì ${user.fullName || user.fullNameTH || user.userName} üëã`,
      placement: "topLeft",
    });

    yield delay(1000);
    window.location.href = ROUTES.ROUTE_MAIN.PATH;

  } catch (error: any) {
    logger.log('error', '[Auth] Login failed', { error: error.message });

    notification.error({ 
      message: "Login Failed! ‚ùå",
      description: error.response?.data?.message || "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà üîÑ",
      placement: "topLeft",
    });

    yield put({ type: AuthActionTypes.AUTHEN_LOGIN_FAIL, message: error.message });
  } finally {
    yield delay(300);
    closeLoading();
  }
}

export function* loginLarkSaga(action: { type: AuthActionTypes; payload: any }) {
  try {
    openLoading();
    logger.log('info', '[Auth] Starting Lark login process');

    const response: AxiosResponse<LoginResponse> = yield call(
      authAPI.loginLark, 
      action.payload
    );

    if (!response.data.success) {
      throw new Error(response.data.message || 'Lark login failed');
    }

    const token = response.data.data;
    localStorage.setItem("access_token", token);

    const authResponse: AxiosResponse<AuthCheckResponse> = yield call(authAPI.checkAuth);
    const { user } = authResponse.data.data;

    yield put({ 
      type: AuthActionTypes.AUTHEN_LOGIN_LARK_SUCCESS, 
      users: user
    });

    notification.success({ 
      message: "Lark Login Successful! üéâ",
      description: `‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö ‡∏Ñ‡∏∏‡∏ì ${user.fullName || user.fullNameTH || user.userName} üëã`,
      placement: "topLeft",
    });

    yield delay(1000);
    window.location.href = ROUTES.ROUTE_MAIN.PATH;

  } catch (error: any) {
    logger.log('error', '[Auth] Lark login failed', { error: error.message });

    notification.error({ 
      message: "Lark Login Failed! ‚ùå",
      description: error.response?.data?.message || "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà üîÑ",
      placement: "topLeft",
    });

    yield put({ type: AuthActionTypes.AUTHEN_LOGIN_LARK_FAIL, message: error.message });
  } finally {
    yield delay(300);
    closeLoading();
  }
}

export function* logoutSaga(): Generator<Effect, void, AxiosResponse> {
  try {
    openLoading();
    logger.log("info", '[Auth] Processing logout');

    // ‡∏™‡πà‡∏á request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡πÄ‡∏û‡∏∑‡πà‡∏≠ invalidate JWT token ‡∏ö‡∏ô server
    try {
      yield call(authAPI.logout);
    } catch (e) {
      logger.log("warn", '[Auth] Non-critical logout API error', e);
      // ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ logout ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤ API ‡∏à‡∏∞‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ß‡πà‡∏≤ backend ‡∏à‡∏∞‡∏•‡∏ö cookie ‡πÅ‡∏•‡πâ‡∏ß
    }

    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£ login ‡∏ù‡∏±‡πà‡∏á client
    localStorage.removeItem("access_token");
    // ‡∏•‡∏ö cookie ‡∏ä‡∏∑‡πà‡∏≠ jwt ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡πÅ‡∏ï‡πà‡∏™‡πà‡∏ß‡∏ô‡πÉ‡∏´‡∏ç‡πà backend ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÅ‡∏•‡πâ‡∏ß)
    document.cookie = "jwt=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";

    yield put({ type: AuthActionTypes.AUTHEN_LOGOUT_SUCCESS });

    notification.success({
      message: "Logged Out Successfully! üëã",
      description: "‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏ö‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà! üöÄ",
      placement: "topLeft",
    });

    yield delay(1000);
    window.location.href = ROUTES_NO_AUTH.ROUTE_LOGIN.PATH;

  } catch (error: any) {
    logger.log("error", '[Auth] Critical logout error', { error: error.message });

    notification.error({
      message: "Logout Failed! ‚ùå",
      description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á üîÑ",
      placement: "topLeft",
    });

    yield delay(1500);
  } finally {
    closeLoading();
  }
}

export function* checkAuthSaga(): Generator<Effect, void, AxiosResponse<AuthCheckResponse>> {
  try {
    logger.log('info', '[Auth] Starting auth check...');
    
    const response = (yield call(authAPI.checkAuth)) as AxiosResponse<AuthCheckResponse>;
    
    if (!response?.data?.success) {
      throw new Error(response?.data?.message || 'Authentication failed');
    }

    const { user } = response.data.data;
    logger.log('info', '[Auth] Auth check success', { user });

    yield put({
      type: AuthActionTypes.AUTHEN_CHECK_SUCCESS,
      users: user
    });

  } catch (error: any) {
    logger.log('error', '[Auth] Auth check error', { error: error.message });

    // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ã‡πâ‡∏≥
    const errorStatus = error.response?.status;
    
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 401 Unauthorized ‡∏´‡∏£‡∏∑‡∏≠ 403 Forbidden ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (errorStatus === 401 || errorStatus === 403) {
      notification.error({
        message: "Session Expired! ‚è≥",
        description: "‡πÄ‡∏ã‡∏™‡∏ä‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà üîê",
        placement: "topLeft",
      });
      
      // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£ login ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      localStorage.removeItem("access_token");
      document.cookie = "jwt=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";

      yield put({ 
        type: AuthActionTypes.AUTHEN_CHECK_FAIL, 
        message: error.message 
      });

      // ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
      yield delay(1000);
      windowNavigateReplaceTo({ pathname: ROUTE_LOGIN });
    } else {
      // ‡∏Å‡∏£‡∏ì‡∏µ‡∏°‡∏µ error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÄ‡∏ä‡πà‡∏ô server error
      notification.error({
        message: "Authentication Error",
        description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        placement: "topLeft",
      });

      yield put({ 
        type: AuthActionTypes.AUTHEN_CHECK_FAIL, 
        message: error.message 
      });
    }
  } finally {
    closeLoading();
  }
}