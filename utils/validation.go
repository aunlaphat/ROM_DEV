package utils

import (
	"errors"
	"fmt"
	"strings"

	req "boilerplate-backend-go/dto/request"
	"boilerplate-backend-go/dto/response"
)

// üõ†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func IsStatusCanceled(statusConfID, statusReturnID *int) bool {
	return (statusConfID != nil && *statusConfID == 3) || (statusReturnID != nil && *statusReturnID == 2)
}

// üõ†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ string ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
func validateRequiredString(field, value string) error {
	if strings.TrimSpace(value) == "" {
		return fmt.Errorf("%s is required", field)
	}
	return nil
}

// üõ†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ int ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö nil)
func validatePositiveInt(field string, value *int) error {
	if value == nil || *value <= 0 {
		return fmt.Errorf("invalid %s", field)
	}
	return nil
}

// üõ†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á BeforeReturnOrder
func ValidateOrderStatus(order *response.BeforeReturnOrderResponse, expectedStatusReturnID, expectedStatusConfID int) error {
	if order.StatusReturnID != nil && *order.StatusReturnID != expectedStatusReturnID {
		return fmt.Errorf("order is not in the expected return status")
	}
	if order.StatusConfID != nil && *order.StatusConfID != expectedStatusConfID {
		return fmt.Errorf("order is not in the expected confirm status")
	}
	return nil
}

// ‚úÖ ValidateCreateSaleReturn - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Sale Return
func ValidateCreateSaleReturn(req req.CreateSaleReturnRequest) error {
	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
	requiredFields := map[string]string{
		"order number": req.OrderNo,
		"SO number":    req.SoNo,
		"customer ID":  req.CustomerID,
		"reason":       req.Reason,
		"logistic":     req.Logistic,
	}

	for field, value := range requiredFields {
		if err := validateRequiredString(field, value); err != nil {
			return err
		}
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ int ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0
	if err := validatePositiveInt("channel ID", &req.ChannelID); err != nil {
		return err
	}
	if err := validatePositiveInt("warehouse ID", &req.WarehouseID); err != nil {
		return err
	}

	// üîπ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
	if len(req.OrderLines) == 0 {
		return errors.New("at least one order line is required")
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
	for i, line := range req.OrderLines {
		if err := validateRequiredString(fmt.Sprintf("SKU for line %d", i+1), line.SKU); err != nil {
			return err
		}
		if err := validatePositiveInt(fmt.Sprintf("quantity for line %d", i+1), &line.QTY); err != nil {
			return err
		}
		if line.ReturnQTY < 0 {
			return fmt.Errorf("return quantity cannot be negative for line %d", i+1)
		}
		if line.ReturnQTY > line.QTY {
			return fmt.Errorf("return quantity cannot be greater than quantity for line %d", i+1)
		}
		if line.Price < 0 {
			return fmt.Errorf("price cannot be negative for line %d", i+1)
		}
	}

	return nil
}

// ‚úÖ ValidateUpdateSaleReturn - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Sale Return
func ValidateUpdateSaleReturn(req req.UpdateSaleReturn) error {
	if err := validateRequiredString("order number", req.OrderNo); err != nil {
		return err
	}
	if err := validateRequiredString("SR number", req.SrNo); err != nil {
		return err
	}
	return nil
}

// ‚úÖ ValidateCreateReturnOrder - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Return Order
func ValidateCreateReturnOrder(req req.CreateReturnOrder) error {
	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
	if err := validateRequiredString("order number", req.OrderNo); err != nil {
		return err
	}
	if err := validateRequiredString("SO number", req.SoNo); err != nil {
		return err
	}
	if err := validatePositiveInt("channel ID", req.ChannelID); err != nil {
		return err
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ order lines ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	if len(req.ReturnOrderLine) == 0 {
		return fmt.Errorf("at least one order line is required")
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô order lines
	for i, line := range req.ReturnOrderLine {
		if err := validateRequiredString(fmt.Sprintf("SKU for line %d", i+1), line.SKU); err != nil {
			return err
		}
		if err := validatePositiveInt(fmt.Sprintf("quantity for line %d", i+1), line.QTY); err != nil {
			return err
		}
		if line.ReturnQTY < 0 {
			return fmt.Errorf("return quantity cannot be negative for line %d", i+1)
		}
		if line.ReturnQTY > *line.QTY {
			return fmt.Errorf("return quantity cannot be greater than quantity for line %d", i+1)
		}
		if line.Price < 0 {
			return fmt.Errorf("price cannot be negative for line %d", i+1)
		}
	}

	return nil
}
