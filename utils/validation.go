package utils

/* // üõ†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
func IsStatusCanceled(statusConfID, statusReturnID *int) bool {
	return (statusConfID != nil && *statusConfID == 3) || (statusReturnID != nil && *statusReturnID == 2)
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô validate ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö CreateSaleReturn
func ValidateCreateBeforeReturn(req req.BeforeReturnOrder) error {
	// 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
	if req.OrderNo == "" {
		return fmt.Errorf("order number is required")
	}
	return nil
}

// ‡∏õ‡πâ‡∏≤‡∏¢
// üõ†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ string ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
func validateRequiredString(field, value string) error {
	if strings.TrimSpace(value) == "" {
		return fmt.Errorf("%s is required", field)
	}
	return nil
}

// üõ†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ int ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0 (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö nil)
func validatePositiveInt(field string, value *int) error {
	if value == nil || *value <= 0 {
		return fmt.Errorf("invalid %s", field)
	}
	return nil
}

// üõ†Ô∏è ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á BeforeReturnOrder
func ValidateOrderStatus(order *response.BeforeReturnOrderResponse, expectedStatusReturnID, expectedStatusConfID int) error {
	if order.StatusReturnID != nil && *order.StatusReturnID != expectedStatusReturnID {
		return fmt.Errorf("order is not in the expected return status")
	}
	if order.StatusConfID != nil && *order.StatusConfID != expectedStatusConfID {
		return fmt.Errorf("order is not in the expected confirm status")
	}
	return nil
}

// ‚úÖ ValidateCreateSaleReturn - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á Sale Return
func ValidateCreateSaleReturn(req req.CreateSaleReturnOrder) error {
	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
	requiredFields := []struct {
		name  string
		value string
	}{
		{"order number", req.OrderNo},
		{"SO number", req.SoNo},
		{"customer ID", req.CustomerID},
		{"reason", req.Reason},
		{"logistic", req.Logistic},
	}

	for _, field := range requiredFields {
		if err := validateRequiredString(field.name, field.value); err != nil {
			return err
		}
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ int ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0
	requiredInts := []struct {
		name  string
		value *int
	}{
		{"channel ID", &req.ChannelID},
		{"warehouse ID", &req.WarehouseID},
	}

	for _, field := range requiredInts {
		if err := validatePositiveInt(field.name, field.value); err != nil {
			return err
		}
	}

	// üîπ ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
	if len(req.OrderLines) == 0 {
		return errors.New("at least one order line is required")
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
	for i, line := range req.OrderLines {
		if err := ValidateSaleReturnLine(line, i+1); err != nil {
			return err
		}
	}

	return nil
}

func ValidateCreateBeforeReturnLine(lines []req.OrderLines) error {
	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ OrderLines ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
	if len(lines) == 0 {
		return fmt.Errorf("‚ö†Ô∏è At least one order line is required")
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ OrderLine
	for i, line := range lines {
		if line.SKU == "" {
			return fmt.Errorf("‚ö†Ô∏è SKU is required for line %d", i+1)
		}
		if line.QTY <= 0 {
			return fmt.Errorf("‚ö†Ô∏è Quantity must be greater than 0 for line %d", i+1)
		}
		if line.ReturnQTY < 0 {
			return fmt.Errorf("‚ö†Ô∏è Return quantity cannot be negative for line %d", i+1)
		}
		if line.ReturnQTY > line.QTY {
			return fmt.Errorf("‚ö†Ô∏è Return quantity cannot be greater than quantity for line %d", i+1)
		}
		if line.Price < 0 {
			return fmt.Errorf("‚ö†Ô∏è Price cannot be negative for line %d", i+1)
		}
		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö AlterSKU ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
		// if line.AlterSKU != nil && *line.AlterSKU == "" {
		// 	return fmt.Errorf("‚ö†Ô∏è Alter SKU cannot be empty if provided for line %d", i+1)
		// }
	}

	return nil
}


func ValidateUpdateSaleReturn(orderNo string, srNo string, updateBy string) error {
	if orderNo == "" {
		return fmt.Errorf("order number is required")
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ Quantity ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0
	if err := validatePositiveInt(fmt.Sprintf("quantity for line %d", index), &line.QTY); err != nil {
		return err
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ReturnQTY ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏ö ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ QTY
	if line.ReturnQTY < 0 {
		return fmt.Errorf("return quantity cannot be negative for line %d", index)
	}
	if line.ReturnQTY > line.QTY {
		return fmt.Errorf("return quantity cannot be greater than quantity for line %d", index)
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Price ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏ö
	if line.Price < 0 {
		return fmt.Errorf("price cannot be negative for line %d", index)
	}

	return nil
}

func ValidateCreateReturnOrder(req req.CreateReturnOrder) error {
	// 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
	if req.OrderNo == "" {
		return fmt.Errorf("‚ö†Ô∏è order number is required")
	}
	if req.SoNo == "" {
		return fmt.Errorf("‚ö†Ô∏è SO number is required")
	}

	// 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0
	if *req.ChannelID <= 0 {
		return fmt.Errorf("‚ö†Ô∏è invalid channel ID")
	}

	// 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö order lines
	if len(req.ReturnOrderLine) == 0 {
		return fmt.Errorf("‚ö†Ô∏è at least one order line is required")
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô order lines
	for i, line := range req.ReturnOrderLine {
		if line.SKU == "" {
			return fmt.Errorf("‚ö†Ô∏è SKU is required for line %d", i+1)
		}
		if *line.QTY <= 0 {
			return fmt.Errorf("‚ö†Ô∏è quantity must be greater than 0 for line %d", i+1)
		}
		if line.ReturnQTY < 0 {
			return fmt.Errorf("‚ö†Ô∏è return quantity cannot be negative for line %d", i+1)
		}
		if line.ReturnQTY > *line.QTY {
			return fmt.Errorf("‚ö†Ô∏è return quantity cannot be greater than quantity for line %d", i+1)
		}
		if line.Price < 0 {
			return fmt.Errorf("‚ö†Ô∏è price cannot be negative for line %d", i+1)
		}
	}

	return nil
}

/* // ‡∏õ‡πâ‡∏≤‡∏¢
func ValidateSaleReturnLine(line req.CreateSaleReturnOrderLine, index int) error {
	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ SKU ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
	if err := validateRequiredString(fmt.Sprintf("SKU for line %d", index), line.SKU); err != nil {
		return err
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ Quantity ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0
	if err := validatePositiveInt(fmt.Sprintf("quantity for line %d", index), &line.QTY); err != nil {
		return err
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ReturnQTY ‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏ö ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ QTY
	if line.ReturnQTY < 0 {
		return fmt.Errorf("return quantity cannot be negative for line %d", index)
	}
	if line.ReturnQTY > line.QTY {
		return fmt.Errorf("return quantity cannot be greater than quantity for line %d", index)
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Price ‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏•‡∏ö
	if line.Price < 0 {
		return fmt.Errorf("price cannot be negative for line %d", index)
	}

	return nil
}

// ‚úÖ ValidateUpdateSaleReturn - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Sale Return
func ValidateUpdateSaleReturn(req req.UpdateSaleReturn) error {
	if err := validateRequiredString("order number", req.OrderNo); err != nil {
		return err
	}
	if err := validateRequiredString("SR number", req.SrNo); err != nil {
		return err
	}
	return nil
}

// ‚úÖ ValidateCreateReturnOrder - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á Return Order
func ValidateCreateReturnOrder(req req.CreateReturnOrder) error {
	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
	if err := validateRequiredString("order number", req.OrderNo); err != nil {
		return err
	}
	if err := validateRequiredString("SO number", req.SoNo); err != nil {
		return err
	}
	if err := validatePositiveInt("channel ID", req.ChannelID); err != nil {
		return err
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ order lines ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	if len(req.ReturnOrderLine) == 0 {
		return fmt.Errorf("‚ö†Ô∏è at least one order line is required")
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô order lines
	for i, line := range req.ReturnOrderLine {
		if err := validateRequiredString(fmt.Sprintf("SKU for line %d", i+1), line.SKU); err != nil {
			return err
		}
		if err := validatePositiveInt(fmt.Sprintf("quantity for line %d", i+1), line.QTY); err != nil {
			return err
		}
		if line.ReturnQTY < 0 {
			return fmt.Errorf("‚ö†Ô∏è return quantity cannot be negative for line %d", i+1)
		}
		if line.ReturnQTY > *line.QTY {
			return fmt.Errorf("‚ö†Ô∏è return quantity cannot be greater than quantity for line %d", i+1)
		}
		if line.Price < 0 {
			return fmt.Errorf("‚ö†Ô∏è price cannot be negative for line %d", i+1)
		}
	}

	return nil
}
*/
