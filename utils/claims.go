package utils

import (
	"errors"
	"fmt"
	"strconv"
)

// GetUserInfoFromClaims ‡∏î‡∏∂‡∏á userID ‡πÅ‡∏•‡∏∞ roleID ‡∏à‡∏≤‡∏Å claims
// - userID ‡πÄ‡∏õ‡πá‡∏ô required field ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤
// - roleID ‡πÄ‡∏õ‡πá‡∏ô optional field ‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
func GetUserInfoFromClaims(claims map[string]interface{}) (userID string, roleID int, err error) {
	// ‡∏î‡∏∂‡∏á userID
	userIDVal, ok := claims["userID"]
	if !ok {
		return "", 0, errors.New("userID is missing in token claims")
	}
	userID, ok = userIDVal.(string)
	if !ok || userID == "" {
		return "", 0, errors.New("invalid userID in token claims")
	}

	// ‡∏î‡∏∂‡∏á roleID (optional)
	roleIDVal, ok := claims["roleID"]
	if !ok {
		return userID, 0, nil // ‡∏ñ‡πâ‡∏≤ roleID ‡πÑ‡∏°‡πà‡∏°‡∏µ ‡∏Å‡πá‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô 0
	}
	roleID, ok = roleIDVal.(int)
	if !ok {
		// ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å float64 ‡∏´‡∏£‡∏∑‡∏≠ string ‡πÄ‡∏õ‡πá‡∏ô int
		switch v := roleIDVal.(type) {
		case float64:
			// ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å float64 ‡πÄ‡∏õ‡πá‡∏ô int
			roleID = int(v)
		case string:
			// ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å string ‡πÄ‡∏õ‡πá‡∏ô int
			roleID, err = strconv.Atoi(v)
			if err != nil {
				return "", 0, fmt.Errorf("invalid roleID format in token claims: %w", err)
			}
		default:
			return "", 0, errors.New("invalid roleID format in token claims")
		}
	}

	return userID, roleID, nil
}

// GetUserIDFromClaims ‡∏î‡∏∂‡∏á userID ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏à‡∏≤‡∏Å claims
func GetUserIDFromClaims(claims map[string]interface{}) (string, error) {
	userID, ok := claims["userID"].(string)
	if !ok || userID == "" {
		return "", fmt.Errorf("invalid user information in token")
	}
	return userID, nil
}

// GetRoleIDFromClaims ‡∏î‡∏∂‡∏á roleID ‡∏à‡∏≤‡∏Å JWT Claims ‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
func GetRoleIDFromClaims(claims map[string]interface{}) (int, error) {
	roleIDVal, ok := claims["roleID"]
	if !ok {
		return 0, fmt.Errorf("roleID is missing in token claims")
	}

	// ‚úÖ Debug Log ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á
	fmt.Printf("üîç Debug: roleIDVal=%v (Type: %T)\n", roleIDVal, roleIDVal)

	switch v := roleIDVal.(type) {
	case int:
		return v, nil
	case float64: // ‚úÖ JSON ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡πá‡∏ö roleID ‡πÄ‡∏õ‡πá‡∏ô float64 -> ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int
		return int(v), nil
	case string: // ‚úÖ ‡∏ñ‡πâ‡∏≤ roleID ‡πÄ‡∏õ‡πá‡∏ô string -> ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int
		roleID, err := strconv.Atoi(v)
		if err != nil {
			return 0, fmt.Errorf("invalid roleID format in token claims: %w", err)
		}
		return roleID, nil
	default:
		return 0, fmt.Errorf("invalid roleID format in token claims (type: %T)", roleIDVal)
	}
}
