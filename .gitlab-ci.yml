image: golang:1.23.5-alpine3.20
stages:
  - build-test
  - upload-test
  - deploy-test
build-test:
  stage: build-test
  only:
    - return-gin
  script:
    - echo "$ENV_TEST" > .env
    - cat .env
    - go mod tidy
    - go mod verify
    - go build -o main .
    - ls
  cache:
    key: build-cache
    paths:
      - main
      - .env
upload-test:
  stage: upload-test
  image: docker:latest
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ''
  only:
    - return-gin
  cache:
    key: build-cache
    paths:
      - main
      - .env
    policy: pull
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA
deploy-test:
  stage: deploy-test
  only:
    - return-gin
  before_script:
    - apk add --update openssh-client openssh bash --repository https://uk.alpinelinux.org/alpine/v3.11/main
    - mkdir -p ~/.ssh
    - eval $(ssh-agent -s)
    - echo "$SSH_KEY_86" > ./key.file
    - chmod 400 ./key.file
    - ssh-add ./key.file
    - echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config
  script:
    - ssh -o StrictHostkeyChecking=no admindcom@$SERVER_IP_86 "
         docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY &&
         docker stop $CI_PROJECT_NAME-${CI_COMMIT_REF_SLUG} || true &&
         docker rm $CI_PROJECT_NAME-${CI_COMMIT_REF_SLUG} || true &&
         docker pull $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA &&
         docker tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA $CI_PROJECT_NAME-${CI_COMMIT_REF_SLUG}:$CI_COMMIT_SHORT_SHA &&
         docker rmi $CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA &&
         docker run -d --restart=always --name $CI_PROJECT_NAME-${CI_COMMIT_REF_SLUG} -p $SERVICE_PORT:8080 $VOLUME_TEST $CI_PROJECT_NAME-${CI_COMMIT_REF_SLUG}:$CI_COMMIT_SHORT_SHA &&
         docker image prune -a -f &&
         exit"