แตกไฟล์และอ่านข้อมูลโค้ดภายใน และทำการแก้ส่วนของ restful api order ทำ crud get post put delete ให้สามารถทำงานได้ โดยมีข้อมูล //รับข้อมูลคำร้องมาจากฝั่ง frontend
package request

//import "time"

type LoginWeb struct {
	UserName string `json:"userName" db:"userID" example:"eknarin"`
	Password string `json:"password," db:"password" example:"asdfhdskjf"`
}
type LoginLark struct {
	UserName string `json:"userName" db:"userName" example:"eknarin"`
	UserID   string `json:"userID" db:"userID" example:"DC99999"`
}

//ข้อมูลสำหรับคำสั่งซื้อ
//ข้อมูลลูกค้า แบรนด์/บริษัทในเครือที่สั่ง เชื่อมกับจน. รหัสสินค้าด้วย OrderNo ด้านล่าง
type GetOrderRequest struct {
	OrderNo          string  	`json:"orderNo" db:"OrderNo" example:"AB0001"`
	BrandName       *string  	`json:"brandName" db:"BrandName" example:"BEWELL"`
	CustName        *string  	`json:"custName" db:"CustName" example:"Num"`
	CustAddress     *string  	`json:"custAddress" db:"CustAddress" example:"7/20 ซอย15/1"`
	CustDistrict    *string  	`json:"custDistrict" db:"CustDistrict" example:"บางกรวย"`
	CustSubDistrict *string  	`json:"custSubDistrict" db:"CustSubDistrict" example:"บางกรวย"`
	CustProvince    *string  	`json:"custProvince" db:"CustProvince" example:"นนทบุรี"`
	CustPostCode    *string  	`json:"custPostCode" db:"CustPostCode" example:"11130"`
	CustPhoneNum    *string  	`json:"custPhoneNum" db:"CustPhoneNum" example:"0921234567"`
	//CreateDate     	*time.Time  `json:"createDate" db:"CreateDate" example:"20/11/2567"`
	//UserCreated     *string 	`json:"userCreated" db:"UserCreated" example:"intern"`
	//UpdateDate      *time.Time  `json:"updateDate" db:"UpdateDate" example:"20/11/2568"`
	//UserUpdated     *string  	`json:"userUpdates" db:"UserUpdated" example:"intern"`

	OrderLines []OrderLineRequest `json:"orderLines"`
}

//ข้อมูลลูกค้า แบรนด์/บริษัทในเครือที่สั่ง เชื่อมกับจน. รหัสสินค้าด้วย OrderNo ด้านล่าง
type CreateOrderRequest struct {
	OrderNo          string  	`json:"orderNo" db:"OrderNo" example:"AB0001"`
	BrandName       *string  	`json:"brandName" db:"BrandName" example:"BEWELL"`
	CustName        *string  	`json:"custName" db:"CustName" example:"Num"`
	CustAddress     *string  	`json:"custAddress" db:"CustAddress" example:"7/20 ซอย15/1"`
	CustDistrict    *string  	`json:"custDistrict" db:"CustDistrict" example:"บางกรวย"`
	CustSubDistrict *string  	`json:"custSubDistrict" db:"CustSubDistrict" example:"บางกรวย"`
	CustProvince    *string  	`json:"custProvince" db:"CustProvince" example:"นนทบุรี"`
	CustPostCode    *string  	`json:"custPostCode" db:"CustPostCode" example:"11130"`
	CustPhoneNum    *string  	`json:"custPhoneNum" db:"CustPhoneNum" example:"0921234567"`
	//CreateDate     	*time.Time  `json:"createDate" db:"CreateDate" example:"20/11/2567"`
	// UserCreated     *string 	`json:"userCreated" db:"UserCreated" example:"intern"`
	// UpdateDate      *time.Time  `json:"updateDate" db:"UpdateDate" example:"20/11/2568"`
	// UserUpdated     *string  	`json:"userUpdates" db:"UserUpdated" example:"intern"`

	OrderLines []OrderLineRequest `json:"orderLines"`
}

type UpdateOrderRequest struct {
	OrderNo          string  	`json:"orderNo" db:"OrderNo" example:"AB0001"`
	BrandName       *string  	`json:"brandName" db:"BrandName" example:"BEWELL"`
	CustName        *string  	`json:"custName" db:"CustName" example:"Num"`
	CustAddress     *string  	`json:"custAddress" db:"CustAddress" example:"7/20 ซอย15/1"`
	CustDistrict    *string  	`json:"custDistrict" db:"CustDistrict" example:"บางกรวย"`
	CustSubDistrict *string  	`json:"custSubDistrict" db:"CustSubDistrict" example:"บางกรวย"`
	CustProvince    *string  	`json:"custProvince" db:"CustProvince" example:"นนทบุรี"`
	CustPostCode    *string  	`json:"custPostCode" db:"CustPostCode" example:"11130"`
	CustPhoneNum    *string  	`json:"custPhoneNum" db:"CustPhoneNum" example:"0921234567"`
	// CreateDate     	*time.Time  `json:"createDate" db:"CreateDate" example:"20/11/2567"`
	// UserCreated     *string 	`json:"userCreated" db:"UserCreated" example:"intern"`
	// UpdateDate      *time.Time  `json:"updateDate" db:"UpdateDate" example:"20/11/2568"`
	// UserUpdated     *string  	`json:"userUpdates" db:"UserUpdated" example:"intern"`
}

//ข้อมูลของสินค้าแต่ละชิ้นที่ลูกค้าสั่ง เชื่อมกันกับด้านบนด้วย OrderNo
type OrderLineRequest struct {
	OrderNo  *string  `json:"orderNo" db:"OrderNo" example:"AB0001"`
	SKU      *string  `json:"sku" db:"SKU" Example:"SKU12345"`
	ItemName *string  `json:"itemName" db:"ItemName" example:"เก้าอี้"`
	QTY      *int     `json:"qty" db:"QTY" Example:"10"`
	Price    *float64 `json:"price" db:"Price" example:"199.05"`
}  //ตอบกลับคำร้องจาก frontend 
package response

//import "time"

type Login struct {
	UserName   string `json:"userName,omitempty" db:"UserName" example:"userName"`
	UserID     string `json:"userID,omitempty" db:"UserID" example:"userID"`
	RoleID     int    `json:"roleID,omitempty" db:"RoleID" example:"1"`
	FullNameTH string `json:"fullNameTH,omitempty" db:"FullNameTH" example:"test1234"`
	NickName   string `json:"nickName,omitempty" db:"NickName" example:"test1234"`
	Platfrom   string `json:"platfrom" db:"Platfrom" example:"test1234"`
}

type OrderResponse struct {
	OrderNo          string  	`json:"orderNo" db:"OrderNo" example:"AB0001"`
	BrandName       *string  	`json:"brandName" db:"BrandName" example:"BEWELL"`
	CustName        *string  	`json:"custName" db:"CustName" example:"Num"`
	CustAddress     *string  	`json:"custAddress" db:"CustAddress" example:"7/20 ซอย15/1"`
	CustDistrict    *string  	`json:"custDistrict" db:"CustDistrict" example:"บางกรวย"`
	CustSubDistrict *string  	`json:"custSubDistrict" db:"CustSubDistrict" example:"บางกรวย"`
	CustProvince    *string  	`json:"custProvince" db:"CustProvince" example:"นนทบุรี"`
	CustPostCode    *string  	`json:"custPostCode" db:"CustPostCode" example:"11130"`
	CustPhoneNum    *string  	`json:"custPhoneNum" db:"CustPhoneNum" example:"0921234567"`
//	CreateDate     	*time.Time  `json:"createDate" db:"CreateDate" example:"20/11/2567"`
//	UserCreated     *string 	`json:"userCreated" db:"UserCreated" example:"intern"`
//	UpdateDate      *time.Time  `json:"updateDate" db:"UpdateDate" example:"20/11/2568"`
//	UserUpdated     *string  	`json:"userUpdates" db:"UserUpdated" example:"intern"`

	OrderLines []OrderLineResponse `json:"orderLines"`
}

type OrderLineResponse struct {
	OrderNo  *string  `json:"orderNo" db:"OrderNo" example:"AB0001"`
	SKU      *string  `json:"sku" db:"SKU" Example:"SKU12345"`
	ItemName *string  `json:"itemName" db:"ItemName" example:"เก้าอี้"`
	QTY      *int     `json:"qty" db:"QTY" Example:"10"`
	Price    *float64 `json:"price" db:"Price" example:"199.05"`
} package entity

import "time"

//โครงสร้างข้อมูลคำสั่งซื้อ

type Order struct {
	OrderNo          string  	`json:"orderNo" db:"OrderNo" example:"AB0001"`
	BrandName       *string  	`json:"brandName" db:"BrandName" example:"BEWELL"`
	CustName        *string  	`json:"custName" db:"CustName" example:"Num"`
	CustAddress     *string  	`json:"custAddress" db:"CustAddress" example:"7/20 ซอย15/1"`
	CustDistrict    *string  	`json:"custDistrict" db:"CustDistrict" example:"บางกรวย"`
	CustSubDistrict *string  	`json:"custSubDistrict" db:"CustSubDistrict" example:"บางกรวย"`
	CustProvince    *string  	`json:"custProvince" db:"CustProvince" example:"นนทบุรี"`
	CustPostCode    *string  	`json:"custPostCode" db:"CustPostCode" example:"11130"`
	CustPhoneNum    *string  	`json:"custPhoneNum" db:"CustPhoneNum" example:"0921234567"`
	CreateDate     	*time.Time  `json:"createDate" db:"CreateDate" example:"20/11/2567"`
	UserCreated     *string 	`json:"userCreated" db:"UserCreated" example:"intern"`
	UpdateDate      *time.Time  `json:"updateDate" db:"UpdateDate" example:"20/11/2568"`
	UserUpdated     *string  	`json:"userUpdates" db:"UserUpdated" example:"intern"`

	OrderLines []OrderLine `gorm:"foreignKey:OrderNo" json:"orderLine"`
}

type OrderLine struct {
	OrderNo  *string  `json:"orderNo" db:"OrderNo" example:"AB0001"`
	SKU      *string  `json:"sku" db:"SKU" Example:"SKU12345"`
	ItemName *string  `json:"itemName" db:"ItemName" example:"เก้าอี้"`
	QTY      *int     `json:"qty" db:"QTY" Example:"10"`
	Price    *float64 `json:"price" db:"Price" example:"199.05"`
}
 และนี้คือโค้ดตัวอย่างที่ต้องการให้การทำงานและใช้เทคนิคเหมือนกัน จัดระเบียบโค้ดเหมือนกัน คือ  package api

import (
	req "boilerplate-backend-go/dto/request"
	res "boilerplate-backend-go/dto/response"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/jwtauth"
)

func (app *Application) AuthRoute(apiRouter *chi.Mux) {

	apiRouter.Route("/auth", func(r chi.Router) {
		r.Post("/login", app.Login)
		r.Post("/login-lark", app.LoginFromLark)
		r.Group(func(router chi.Router) {
			router.Use(jwtauth.Verifier(app.TokenAuth))
			router.Use(jwtauth.Authenticator)
			router.Get("/", app.CheckAuthen)
			router.Post("/logout", app.Logout)
		})
	})
}

var contentType = "content-type"
var appJson = "application/json"

// Generate JWT token with username's payload
func (app *Application) GenerateToken(tokenData res.Login) string {
	data := map[string]interface{}{
		"userID":     tokenData.UserID,
		"roleID":     tokenData.RoleID,
		"nickName":   tokenData.NickName,
		"fullNameTH": tokenData.FullNameTH,
		"plateform":  tokenData.Platfrom,
	}
	_, tokenString, _ := app.TokenAuth.Encode(data)
	return tokenString
}

// @Summary User Login
// @Description Handles user login requests and generates a token for the authenticated user.
// @ID user-login
// @Tags Auth
// @Accept json
// @Produce json
// @Param login-request body request.LoginWeb true "User login credentials in JSON format"
// @Success 200 {object} Response{result=string} "JWT token"
// @Failure 400 {object} Response "Bad Request"
// @Failure 500 {object} Response "Internal Server Error"
// @Router /auth/login [post]
func (app *Application) Login(w http.ResponseWriter, r *http.Request) {
	if r.Header.Get(contentType) != appJson {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	req := req.LoginWeb{}
	err := json.NewDecoder(r.Body).Decode(&req)
	if err != nil {
		handleError(w, err)
		return
	}

	user, err := app.Service.User.Login(req)
	if err != nil {
		handleError(w, err)
		return
	}
	tokenData := res.Login{
		UserID:     user.UserID,
		RoleID:     user.RoleID,
		NickName:   user.NickName,
		FullNameTH: user.FullNameTH,
		Platfrom:   user.Platfrom,
	}
	fmt.Println("token data", tokenData)
	token := app.GenerateToken(tokenData)
	fmt.Println("token: ", token)
	http.SetCookie(w, &http.Cookie{
		HttpOnly: false,
		Expires:  time.Now().Add(4 * time.Hour), //4 hours life
		SameSite: http.SameSiteLaxMode,
		Name:     "jwt", // Must be named "jwt" or else the token cannot be searched for by jwtauth.Verifier.
		Value:    token,
		Path:     "/",
	})
	handleResponse(w, true, "login Success", token, http.StatusOK)
}

// @Summary User Lark Login
// @Description Handles user login requests and generates a token for the authenticated user.
// @ID user-login-lark
// @Tags Auth
// @Accept json
// @Produce json
// @Param Login-request-lark body request.LoginLark true "User login from lark credentials from Lark in JSON format"
// @Success 200 {object} Response{result=string} "JWT token"
// @Failure 400 {object} Response "Bad Request"
// @Failure 500 {object} Response "Internal Server Error"
// @Router /auth/login-lark [post]
func (app *Application) LoginFromLark(w http.ResponseWriter, r *http.Request) {
	if r.Header.Get("content-type") != "application/json" {
		http.Error(w, http.StatusText(http.StatusBadRequest), http.StatusBadRequest)
		return
	}
	req := req.LoginLark{}
	err := json.NewDecoder(r.Body).Decode(&req)
	if err != nil {
		handleError(w, err)
		return
	}

	user, err := app.Service.User.LoginLark(req)
	if err != nil {
		handleError(w, err)
		return
	}
	tokenData := res.Login{
		UserID:     user.UserID,
		RoleID:     user.RoleID,
		NickName:   user.NickName,
		FullNameTH: user.FullNameTH,
		Platfrom:   user.Platfrom,
	}
	token := app.GenerateToken(tokenData)

	http.SetCookie(w, &http.Cookie{
		HttpOnly: false,
		Expires:  time.Now().Add(4 * time.Hour), //4 hours life
		SameSite: http.SameSiteLaxMode,
		Name:     "jwt", // Must be named "jwt" or else the token cannot be searched for by jwtauth.Verifier.
		Value:    token,
		Path:     "/",
	})

	handleResponse(w, true, "login's Lark Success", token, http.StatusOK)
	// w.WriteHeader(http.StatusOK)

	// w.Header().Set("content-type", "application/json")
	// json.NewEncoder(w).Encode(user)
}

// @Summary User Logout
// @Description Logs out the user by deleting the JWT token.
// @ID user-logout
// @Tags Auth
// @Success 200 {object} Response{result=string} "Logout successful"
// @Failure 500 {object} Response "Internal Server Error"
// @Router /auth/logout [post]
func (app *Application) Logout(w http.ResponseWriter, r *http.Request) {
	http.SetCookie(w, &http.Cookie{
		HttpOnly: true,
		MaxAge:   -1, // Delete the cookie.
		SameSite: http.SameSiteLaxMode,
		Name:     "jwt",
		Value:    "",
	})
	handleResponse(w, true, "login Success", "None", http.StatusOK)

}

// @Summary Check Authentication
// @Description A test endpoint to check if the user is authenticated and to demonstrate Swagger documentation.
// @ID check-authentication
// @Tags Auth
// @Accept json
// @Produce json
// @Success 200 {object} Response{result=map[string]interface{}} "Authenticated user details"
// @Failure 401 {object} Response "Unauthorized"
// @Failure 500 {object} Response "Internal Server Error"
// @Router /auth [get]
func (app *Application) CheckAuthen(w http.ResponseWriter, r *http.Request) {
	fmt.Println(r.Context())
	_, claims, _ := jwtauth.FromContext(r.Context())
	handleResponse(w, true, "Checked", claims, http.StatusOK)
}
  package repository

import (
	response "boilerplate-backend-go/dto/response"
	"context"
	"database/sql"
	"time"
)

type UserRepository interface {
	GetUser(username, password string) (response.Login, error)
	GetUserFromLark(username, userID string) (response.Login, error)
}

func (repo repositoryDB) GetUserFromLark(username, userID string) (response.Login, error) {
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	var user response.Login
	user.UserName = username
	query := `
        SELECT UserName, UserID, RoleID, NickName, FullNameTH , 'lark' as  Platform
        FROM V_User_Login
        WHERE UserName = @userName AND UserID = @userID
    `
	err := repo.db.GetContext(ctx, &user, query,
		sql.Named("userName", username),
		sql.Named("userID", userID),
	)
	if err != nil {
		return user, err
	}
	return user, nil
}

func (repo repositoryDB) GetUser(username, password string) (response.Login, error) {
	return response.Login{}, nil
}   package service

import (
	request "boilerplate-backend-go/dto/request"
	response "boilerplate-backend-go/dto/response"
	"boilerplate-backend-go/errors"
	"crypto/md5"
	"database/sql"
	"encoding/hex"
)

type UserService interface {
	Login(req request.LoginWeb) (response.Login, error)
	LoginLark(req request.LoginLark) (response.Login, error)
}

func (srv service) Login(req request.LoginWeb) (response.Login, error) {
	res := response.Login{}
	if req.UserName == "" || req.Password == "" {
		return res, errors.ValidationError("username or password must not be null")
	}

	hasher := md5.New()
	hasher.Write([]byte(req.Password))
	hashedPassword := hex.EncodeToString(hasher.Sum(nil))
	res, err := srv.userRepo.GetUser(req.UserName, hashedPassword)
	if err != nil {
		switch err {
		case sql.ErrNoRows:
			return res, errors.UnauthorizedError("username or password is not valid")
		default:
			srv.logger.Error(err)
			return res, errors.UnexpectedError()
		}
	}
	return res, nil
}

// Login: Lark
func (srv service) LoginLark(req request.LoginLark) (response.Login, error) {
	res := response.Login{}
	if req.UserName == "" || req.UserID == "" {
		return res, errors.ValidationError("username or password must not be null")
	}

	res, err := srv.userRepo.GetUserFromLark(req.UserName, req.UserID)
	if err != nil {
		switch err {
		case sql.ErrNoRows:
			return res, errors.UnauthorizedError("username or password is not valid")
		default:
			srv.logger.Error(err)
			return res, errors.UnexpectedError()
		}
	}
	return res, nil
} จงสร้าง order ให้ได้ตามความต้องการด้านบน และนี้คือdbของ order /****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [OrderNo]
      ,[BrandName]
      ,[CustName]
      ,[CustAddress]
      ,[CustDistrict]
      ,[CustSubDistrict]
      ,[CustProvince]
      ,[CustPostCode]
      ,[CustPhoneNum]
      ,[CreateDate]
      ,[UserCreated]
      ,[UpdateDate]
      ,[UserUpdated]
  FROM [Data_TestCRUD].[dbo].[OrderHead]  /****** Script for SelectTopNRows command from SSMS  ******/
SELECT TOP (1000) [No]
      ,[OrderNo]
      ,[SKU]
      ,[ItemName]
      ,[QTY]
      ,[Price]
  FROM [Data_TestCRUD].[dbo].[OrderLine] 