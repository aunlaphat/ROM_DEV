package service

import (
	request "boilerplate-backend-go/dto/request"
	response "boilerplate-backend-go/dto/response"
	"boilerplate-backend-go/utils"
	"context"
	"fmt"

	"go.uber.org/zap"
)

type BefROService interface {
	CreateBeforeReturnOrderWithLines(ctx context.Context, req request.BeforeReturnOrder) (*response.BeforeReturnOrderResponse, error)
	ListBeforeReturnOrders(ctx context.Context) ([]response.BeforeReturnOrderResponse, error)
	GetBeforeReturnOrderByOrderNo(ctx context.Context, orderNo string) (*response.BeforeReturnOrderResponse, error)
	ListBeforeReturnOrderLines(ctx context.Context) ([]response.BeforeReturnOrderLineResponse, error)
	GetBeforeReturnOrderLineByOrderNo(ctx context.Context, orderNo string) ([]response.BeforeReturnOrderLineResponse, error)
	UpdateBeforeReturnOrderWithLines(ctx context.Context, req request.BeforeReturnOrder) (*response.BeforeReturnOrderResponse, error)

	// ************************ Create Sale Return ************************ //
	SearchOrder(ctx context.Context, soNo, orderNo string) ([]response.SaleOrderResponse, error)
	CreateSaleReturn(ctx context.Context, req request.BeforeReturnOrder) (*response.BeforeReturnOrderResponse, error)
	UpdateSaleReturn(ctx context.Context, orderNo string, srNo string, updateBy string) error
	ConfirmSaleReturn(ctx context.Context, orderNo string, confirmBy string) error
	CancelSaleReturn(ctx context.Context, orderNo string, updateBy string, remark string) error
}

func (srv service) CreateBeforeReturnOrderWithLines(ctx context.Context, req request.BeforeReturnOrder) (*response.BeforeReturnOrderResponse, error) {
	srv.logger.Info("üèÅ Starting order creation process", zap.String("OrderNo", req.OrderNo))
	srv.logger.Debug("Creating order head", zap.String("OrderNo", req.OrderNo), zap.String("SoNo", req.SoNo))

	err := srv.befRORepo.CreateBeforeReturnOrderWithTransaction(ctx, req)
	if err != nil {
		srv.logger.Error("‚ùå Failed to create order with lines", zap.Error(err))
		return nil, err
	}

	createdOrder, err := srv.befRORepo.GetBeforeReturnOrderByOrderNo(ctx, req.OrderNo)
	if err != nil {
		srv.logger.Error("‚ùå Failed to fetch created order", zap.Error(err))
		return nil, err
	}

	srv.logger.Info("‚úÖ Successfully created order with lines",
		zap.String("OrderNo", req.OrderNo))
	return createdOrder, nil
}

func (srv service) UpdateBeforeReturnOrderWithLines(ctx context.Context, req request.BeforeReturnOrder) (*response.BeforeReturnOrderResponse, error) {
	srv.logger.Info("üèÅ Starting order update process", zap.String("OrderNo", req.OrderNo))
	srv.logger.Debug("Updating order head", zap.String("OrderNo", req.OrderNo), zap.String("SoNo", req.SoNo))

	err := srv.befRORepo.UpdateBeforeReturnOrderWithTransaction(ctx, req)
	if err != nil {
		srv.logger.Error("‚ùå Failed to update order with lines", zap.Error(err))
		return nil, err
	}

	updatedOrder, err := srv.befRORepo.GetBeforeReturnOrderByOrderNo(ctx, req.OrderNo)
	if err != nil {
		srv.logger.Error("‚ùå Failed to fetch updated order", zap.Error(err))
		return nil, err
	}

	srv.logger.Info("‚úÖ Successfully updated order with lines",
		zap.String("OrderNo", req.OrderNo))
	return updatedOrder, nil
}

func (srv service) ListBeforeReturnOrders(ctx context.Context) ([]response.BeforeReturnOrderResponse, error) {
	srv.logger.Info("üèÅ Starting to list all return orders")
	orders, err := srv.befRORepo.ListBeforeReturnOrders(ctx)
	if err != nil {
		srv.logger.Error("‚ùå Failed to list return orders", zap.Error(err))
		return nil, err
	}
	srv.logger.Info("‚úÖ Successfully listed return orders")
	return orders, nil
}

func (srv service) GetBeforeReturnOrderByOrderNo(ctx context.Context, orderNo string) (*response.BeforeReturnOrderResponse, error) {
	srv.logger.Info("üèÅ Starting to get return order by order number", zap.String("OrderNo", orderNo))
	order, err := srv.befRORepo.GetBeforeReturnOrderByOrderNo(ctx, orderNo)
	if err != nil {
		srv.logger.Error("‚ùå Failed to get return order by order number", zap.Error(err))
		return nil, err
	}
	return order, nil
}

func (srv service) ListBeforeReturnOrderLines(ctx context.Context) ([]response.BeforeReturnOrderLineResponse, error) {
	srv.logger.Info("üèÅ Starting to list all return order lines")
	lines, err := srv.befRORepo.ListBeforeReturnOrderLines(ctx)
	if err != nil {
		srv.logger.Error("‚ùå Failed to list return order lines", zap.Error(err))
		return nil, err
	}
	srv.logger.Info("‚úÖ Successfully listed return order lines")
	return lines, nil
}

func (srv service) GetBeforeReturnOrderLineByOrderNo(ctx context.Context, orderNo string) ([]response.BeforeReturnOrderLineResponse, error) {
	srv.logger.Info("üèÅ Starting to get return order lines by order number", zap.String("OrderNo", orderNo))
	lines, err := srv.befRORepo.GetBeforeReturnOrderLineByOrderNo(ctx, orderNo)
	if err != nil {
		srv.logger.Error("‚ùå Failed to get return order lines by order number", zap.Error(err))
		return nil, err
	}
	srv.logger.Info("‚úÖ Successfully fetched return order lines")
	return lines, nil
}

// ************************ Create Sale Return ************************ //

func (srv service) SearchOrder(ctx context.Context, soNo, orderNo string) ([]response.SaleOrderResponse, error) {
	// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Logging ‡∏Ç‡∏≠‡∏á API Call
	deferFunc := srv.logger.LogAPICall("SearchOrder",
		zap.String("SoNo", soNo),
		zap.String("OrderNo", orderNo))
	defer deferFunc("Completed", nil) // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ "Completed" ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ Error

	// Logging ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
	srv.logger.Info("üîé Starting to search sale order üîé", zap.String("SoNo", soNo), zap.String("OrderNo", orderNo))

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å Repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ Order ‡∏î‡πâ‡∏ß‡∏¢ SoNo ‡πÅ‡∏•‡∏∞ OrderNo
	order, err := srv.befRORepo.SearchOrder(ctx, soNo, orderNo)
	if err != nil {
		// ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log ‡∏ó‡∏µ‡πà Error
		deferFunc("Failed", err)
		srv.logger.Error("‚ùå Failed to search sale orders", zap.Error(err))
		return nil, err
	}

	// ‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	if order == nil {
		// ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
		deferFunc("Not Found", nil)
		srv.logger.Warn("‚ö†Ô∏è No sale order found", zap.String("SoNo", soNo), zap.String("OrderNo", orderNo))
		return nil, nil
	}

	// Logging ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log ‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	deferFunc("Success", nil)
	/* srv.logger.Info("‚úÖ Successfully searched sale orders",
	zap.String("SoNo", soNo),
	zap.String("OrderNo", orderNo)) */

	// ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
	return []response.SaleOrderResponse{*order}, nil
}

func (srv service) CreateSaleReturn(ctx context.Context, req request.BeforeReturnOrder) (*response.BeforeReturnOrderResponse, error) {
	// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Logging ‡∏Ç‡∏≠‡∏á API Call
	deferFunc := srv.logger.LogAPICall("CreateSaleReturn",
		zap.String("OrderNo", req.OrderNo))
	defer deferFunc("Completed", nil) // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ "Completed" ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ Error

	// logging ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
	srv.logger.Info("üîé Starting sale return creation process üîé",
		zap.String("OrderNo", req.OrderNo))

	// Validate request
	if err := utils.ValidateCreateSaleReturn(req); err != nil {
		// ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á order ‡πÑ‡∏î‡πâ
		deferFunc("Failed", err)
		srv.logger.Error("‚ùå Invalid request", zap.Error(err))
		return nil, fmt.Errorf("validation failed: %w", err)
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ order ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	existingOrder, err := srv.befRORepo.GetBeforeReturnOrderByOrderNo(ctx, req.OrderNo)
	if err != nil {
		// ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö order ‡πÑ‡∏î‡πâ
		deferFunc("Failed", err)
		srv.logger.Error("‚ùå Failed to check existing order", zap.Error(err))
		return nil, err
	}

	if existingOrder != nil {
		// ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log ‡∏ß‡πà‡∏≤‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
		deferFunc("Failed", err)
		err = fmt.Errorf("‚ö†Ô∏è Order already exists: %s", req.OrderNo)
		return nil, err
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á sale return order
	createdOrder, err := srv.befRORepo.CreateSaleReturn(ctx, req)
	if err != nil {
		// ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î log ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á order ‡πÑ‡∏î‡πâ
		deferFunc("Failed", err)
		srv.logger.Error("‚ùå Failed to create sale return order", zap.Error(err))
		return nil, err
	}

	// Logging ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log ‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	deferFunc("Success", nil)
	/* srv.logger.Info("‚úÖ Successfully created sale return order",
	zap.String("OrderNo", req.OrderNo)) */

	// ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
	return createdOrder, nil
}

func (srv service) UpdateSaleReturn(ctx context.Context, orderNo string, srNo string, updateBy string) error {
	// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Logging ‡∏Ç‡∏≠‡∏á API Call
	deferFunc := srv.logger.LogAPICall("UpdateSaleReturn",
		zap.String("OrderNo", orderNo),
		zap.String("SrNo", srNo),
		zap.String("UpdateBy", updateBy))
	defer deferFunc("Completed", nil)

	// Logging ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
	srv.logger.Info("üîÑ Starting sale return update process üîÑ",
		zap.String("OrderNo", orderNo),
		zap.String("SrNo", srNo),
		zap.String("UpdateBy", updateBy))

	// Validation ‡∏Ç‡∏≠‡∏á request
	if err := utils.ValidateUpdateSaleReturn(orderNo, srNo, updateBy); err != nil {
		// ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó order ‡πÑ‡∏î‡πâ
		deferFunc("Failed", err)
		srv.logger.Error("‚ùå Invalid request", zap.Error(err))
		return nil
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á order
	order, err := srv.befRORepo.GetBeforeReturnOrderByOrderNo(ctx, orderNo)
	if err != nil {
		// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡πÑ‡∏î‡πâ
		deferFunc("Failed", err)
		srv.logger.Error("‚ùå Failed to get order", zap.Error(err))
		return nil
	}
	if order == nil {
		// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö order
		deferFunc("Not Found", nil)
		return nil
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó (‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
	if order.StatusConfID != nil && *order.StatusConfID == 3 { // ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÅ‡∏•‡πâ‡∏ß
		// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó order ‡πÑ‡∏î‡πâ
		deferFunc("Failed", fmt.Errorf("order is canceled"))
		srv.logger.Error("‚ùå Cannot update canceled order", zap.String("OrderNo", orderNo))
		return nil
	}

	// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
	if order.StatusReturnID != nil && *order.StatusReturnID != 1 { // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
		// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó order ‡πÑ‡∏î‡πâ
		deferFunc("Failed", fmt.Errorf("invalid status"))
		srv.logger.Error("‚ùå Cannot update SR number: invalid status", zap.String("OrderNo", orderNo))
		return nil
	}

	// ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó SR number
	err = srv.befRORepo.UpdateSaleReturn(ctx, orderNo, srNo, updateBy)
	if err != nil {
		// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log ‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó SR number ‡πÑ‡∏î‡πâ
		deferFunc("Failed", err)
		srv.logger.Error("‚ùå Failed to update SR number", zap.Error(err))
		return nil
	}

	// Logging ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log ‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	deferFunc("Success", nil)
	/* srv.logger.Info("‚úÖ Successfully updated SR number",
	zap.String("OrderNo", orderNo),
	zap.String("SrNo", srNo),
	zap.String("UpdateBy", updateBy)) */

	return nil
}

func (srv service) ConfirmSaleReturn(ctx context.Context, orderNo string, confirmBy string) error {
	deferFunc := srv.logger.LogAPICall("ConfirmSaleReturn",
		zap.String("OrderNo", orderNo),
		zap.String("ConfirmBy", confirmBy))
	defer deferFunc("Completed", nil)

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á order
	order, err := srv.befRORepo.GetBeforeReturnOrderByOrderNo(ctx, orderNo)
	if err != nil {
		deferFunc("Failed", fmt.Errorf("failed to get order: %v", err))
		return err
	}
	if order == nil {
		err = fmt.Errorf("order not found: %s", orderNo)
		deferFunc("Not Found", err)
		return err
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ order ‡∏ñ‡∏π‡∏Å confirm ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if order.StatusConfID != nil && *order.StatusConfID == 1 {
		err = fmt.Errorf("order %s is already confirmed", orderNo)
		deferFunc("Failed", err)
		return err
	}

	// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ repository layer
	if err := srv.befRORepo.ConfirmSaleReturn(ctx, orderNo, confirmBy); err != nil {
		deferFunc("Failed", fmt.Errorf("failed to confirm order: %v", err))
		return err
	}

	deferFunc("Success", nil)
	return nil
}

func (srv service) CancelSaleReturn(ctx context.Context, orderNo string, updateBy string, remark string) error {
	// 1. Input validation
	if orderNo == "" || updateBy == "" || remark == "" {
		return fmt.Errorf("orderNo, updateBy and remark are required")
	}

	// 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Ç‡∏≠‡∏á order
	order, err := srv.befRORepo.GetBeforeReturnOrderByOrderNo(ctx, orderNo)
	if err != nil {
		srv.logger.Error("Failed to get order status", zap.Error(err))
		return err
	}
	if order == nil {
		return fmt.Errorf("order not found: %s", orderNo)
	}

	// 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if order.StatusConfID != nil && *order.StatusConfID == 3 {
		srv.logger.Error("Order already canceled",
			zap.String("OrderNo", orderNo))
		return fmt.Errorf("order already canceled")
	}

	// 4. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ repository layer ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å order ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á cancel status
	err = srv.befRORepo.CancelSaleReturn(ctx, orderNo, updateBy, remark)
	if err != nil {
		srv.logger.Error("Failed to process cancellation", zap.Error(err))
		return err
	}

	// 5. Log ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	srv.logger.Info("Successfully canceled sale return",
		zap.String("OrderNo", orderNo),
		zap.String("UpdateBy", updateBy),
		zap.String("Remark", remark))

	return nil
}
