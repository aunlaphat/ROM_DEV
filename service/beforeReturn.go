package service

import (
	request "boilerplate-backend-go/dto/request"
	response "boilerplate-backend-go/dto/response"
	"boilerplate-backend-go/utils"
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/pkg/errors"
	"go.uber.org/zap"
)

// BefROService interface ‡∏Å‡∏≥‡∏´‡∏ô‡∏î method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö Before Return Order
type BeforeReturnService interface {
	// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Before Return Order ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö Lines
	CreateBeforeReturnOrderWithLines(ctx context.Context, req request.BeforeReturnOrder) (*response.BeforeReturnOrderResponse, error)
	// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Before Return Orders ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	ListBeforeReturnOrders(ctx context.Context) ([]response.BeforeReturnOrderResponse, error)
	// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á Before Return Order ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ OrderNo
	GetBeforeReturnOrderByOrderNo(ctx context.Context, orderNo string) (*response.BeforeReturnOrderResponse, error)
	// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Before Return Order Lines ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	ListBeforeReturnOrderLines(ctx context.Context) ([]response.BeforeReturnOrderLineResponse, error)
	// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á Before Return Order Lines ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ OrderNo
	GetBeforeReturnOrderLineByOrderNo(ctx context.Context, orderNo string) ([]response.BeforeReturnOrderLineResponse, error)
	// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Before Return Order ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö Lines
	UpdateBeforeReturnOrderWithLines(ctx context.Context, req request.BeforeReturnOrder) (*response.BeforeReturnOrderResponse, error)

	// Create Return Order MKP üö®//
	SearchOrder(ctx context.Context, soNo, orderNo string) ([]response.SaleOrderResponse, error)
	CreateSaleReturn(ctx context.Context, req request.CreateSaleReturnRequest) (*response.BeforeReturnOrderResponse, error)
	UpdateSaleReturn(ctx context.Context, req request.UpdateSaleReturn, userID string) (*response.UpdateSaleReturnResponse, error)
	ConfirmSaleReturn(ctx context.Context, orderNo string, roleID int, userID string) (*response.ConfirmSaleReturnResponse, error)
	CancelSaleReturn(ctx context.Context, req request.CancelSaleReturn, userID string) (*response.CancelSaleReturnResponse, error)

	// Draft & Confirm MKP üö®//
	ListDraftOrders(ctx context.Context, startDate, endDate string) ([]response.ListDraftConfirmOrdersResponse, error)
	ListConfirmOrders(ctx context.Context, startDate, endDate string) ([]response.ListDraftConfirmOrdersResponse, error)
	GetDraftConfirmOrderByOrderNo(ctx context.Context, orderNo string) (*response.DraftHeadResponse, error)
	ListCodeR(ctx context.Context) ([]response.ListCodeRResponse, error)
	AddCodeR(ctx context.Context, req request.AddCodeR, userID string) ([]response.AddCodeRResponse, error)
	DeleteCodeR(ctx context.Context, orderNo string, sku string, userID string) error
	UpdateDraftOrder(ctx context.Context, orderNo string, userID string) (*response.UpdateOrderStatusResponse, error)

	// Method ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	GetAllOrderDetail(ctx context.Context) ([]response.OrderDetail, error)
	// Method ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤
	GetAllOrderDetails(ctx context.Context, page, limit int) ([]response.OrderDetail, error)
	// Method ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç SO
	GetOrderDetailBySO(ctx context.Context, soNo string) (*response.OrderDetail, error)
	// Method ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ BeforeReturnOrderLine ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ RecID
	DeleteBeforeReturnOrderLine(ctx context.Context, recID string) error
	// Method ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
	CreateTradeReturn(ctx context.Context, req request.BeforeReturnOrder) (*response.BeforeReturnOrderResponse, error)
	// Method ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
	CreateTradeReturnLine(ctx context.Context, orderNo string, lines request.TradeReturnLine) ([]response.BeforeReturnOrderLineResponse, error)
	// Method ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á
	ConfirmReceipt(ctx context.Context, req request.ConfirmTradeReturnRequest, updateBy string) error
	// Method ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏î‡∏¢‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
	ConfirmReturn(ctx context.Context, req request.ConfirmToReturnRequest, updateBy string) error
	// Method ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
	ValidateCreate(req request.BeforeReturnOrder) error
}

// Create Return Order MKP
func (srv service) SearchOrder(ctx context.Context, soNo, orderNo string) ([]response.SaleOrderResponse, error) {
	logFinish := srv.logger.LogAPICall(ctx, "SearchOrder", zap.String("SoNo", soNo), zap.String("OrderNo", orderNo))
	defer logFinish("Completed", nil)

	srv.logger.Info("üîé Searching Sale Order üîé",
		zap.String("SoNo", soNo),
		zap.String("OrderNo", orderNo),
	)

	order, err := srv.beforeReturnRepo.SearchOrder(ctx, soNo, orderNo)
	if err != nil {
		logFinish("Failed", err)
		srv.logger.Error("‚ùå Search Order Failed ‚ùå",
			zap.Error(err),
			zap.String("SoNo", soNo),
			zap.String("OrderNo", orderNo),
		)
		return nil, fmt.Errorf("search order failed: %w", err)
	}

	if order == nil {
		logFinish("Not Found", nil)
		srv.logger.Warn("‚ö†Ô∏è No Sale Order Found ‚ö†Ô∏è",
			zap.String("SoNo", soNo),
			zap.String("OrderNo", orderNo),
		)
		return nil, nil
	}

	srv.logger.Info("‚úÖ Sale Order Found ‚úÖ",
		zap.String("SoNo", soNo),
		zap.String("OrderNo", orderNo),
		zap.Any("OrderDetails", order),
	)

	logFinish("Success", nil)
	return []response.SaleOrderResponse{*order}, nil
}

// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Sale Return
func (srv service) CreateSaleReturn(ctx context.Context, req request.CreateSaleReturnRequest) (*response.BeforeReturnOrderResponse, error) {
	// ‚úÖ Logging API Call
	logFinish := srv.logger.LogAPICall(ctx, "CreateSaleReturn", zap.String("OrderNo", req.OrderNo))
	defer logFinish("Completed", nil)

	// ‚úÖ Validate Request
	if err := utils.ValidateCreateSaleReturn(req); err != nil {
		srv.logger.Error("‚ùå Validation failed", zap.Error(err))
		logFinish("Failed", err)
		return nil, errors.Wrap(err, "validation failed")
	}

	// ‚úÖ Check if Order Already Exists
	existingOrder, err := srv.beforeReturnRepo.GetBeforeReturnOrderByOrderNo(ctx, req.OrderNo)
	if err != nil && !errors.Is(err, sql.ErrNoRows) {
		srv.logger.Error("‚ùå Failed to check existing order", zap.Error(err))
		logFinish("Failed", err)
		return nil, errors.Wrap(err, "failed to check existing order")
	}
	if existingOrder != nil {
		err := fmt.Errorf("‚ö†Ô∏è Order already exists: %s", req.OrderNo)
		srv.logger.Warn("‚ö†Ô∏è Duplicate order found", zap.String("OrderNo", req.OrderNo))
		logFinish("Failed", err)
		return nil, err
	}

	// ‚úÖ Call Repository Layer
	createdOrder, err := srv.beforeReturnRepo.CreateSaleReturn(ctx, req)
	if err != nil {
		srv.logger.Error("‚ùå Failed to create sale return", zap.Error(err))
		logFinish("Failed", err)
		return nil, errors.Wrap(err, "failed to create sale return order")
	}

	srv.logger.Info("‚úÖ Sale return order created successfully", zap.String("OrderNo", createdOrder.OrderNo))
	logFinish("Success", nil)

	return createdOrder, nil
}

// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Sale Return
func (srv service) UpdateSaleReturn(ctx context.Context, req request.UpdateSaleReturn, userID string) (*response.UpdateSaleReturnResponse, error) {
	// ü™Ñ Start Logging
	logFinish := srv.logger.LogAPICall(ctx, "UpdateSaleReturn", zap.String("OrderNo", req.OrderNo), zap.String("SrNo", req.SrNo), zap.String("UserID", userID))
	defer logFinish("Completed", nil)

	srv.logger.Info("üîé Updating Sale Return Order", zap.String("OrderNo", req.OrderNo), zap.String("SrNo", req.SrNo), zap.String("UserID", userID))

	// ‚úÖ Validate request
	if req.OrderNo == "" || req.SrNo == "" {
		err := errors.New("OrderNo and SrNo are required")
		srv.logger.Warn("‚ö†Ô∏è Validation failed", zap.String("OrderNo", req.OrderNo), zap.Error(err))
		logFinish("Failed", err)
		return nil, err
	}

	// ‚úÖ Fetch existing order
	order, err := srv.beforeReturnRepo.GetBeforeReturnOrderByOrderNo(ctx, req.OrderNo)
	if err != nil {
		srv.logger.Error("‚ùå Error fetching order", zap.String("OrderNo", req.OrderNo), zap.Error(err))
		logFinish("Failed", err)
		return nil, errors.Wrap(err, "failed to fetch order")
	}
	if order == nil {
		err := fmt.Errorf("‚ö†Ô∏è Order not found: %s", req.OrderNo)
		srv.logger.Warn("‚ö†Ô∏è Order not found", zap.String("OrderNo", req.OrderNo))
		logFinish("Failed", err)
		return nil, err
	}

	// ‚úÖ Call Repository to Update Sale Return
	if err := srv.beforeReturnRepo.UpdateSaleReturn(ctx, req, userID); err != nil {
		srv.logger.Error("‚ùå Failed to update SR number", zap.String("OrderNo", req.OrderNo), zap.Error(err))
		logFinish("Failed", err)
		return nil, errors.Wrap(err, "failed to update SR number")
	}

	// ‚úÖ Construct Response
	response := &response.UpdateSaleReturnResponse{
		OrderNo:    req.OrderNo,
		SrNo:       req.SrNo,
		UpdateBy:   userID,
		UpdateDate: time.Now(),
	}

	// ‚úÖ Logging Success
	srv.logger.Info("‚úÖ Sale Return Updated Successfully", zap.String("OrderNo", req.OrderNo), zap.String("UserID", userID))
	logFinish("Success", nil)
	return response, nil
}

func (srv service) ConfirmSaleReturn(ctx context.Context, orderNo string, roleID int, userID string) (*response.ConfirmSaleReturnResponse, error) {
	// ü™Ñ Start Logging
	logFinish := srv.logger.LogAPICall(ctx, "ConfirmSaleReturn", zap.String("OrderNo", orderNo), zap.Int("RoleID", roleID))
	defer func() { logFinish("Completed", nil) }()

	// ‚úÖ 1. Retrieve Order Details
	order, err := srv.beforeReturnRepo.GetBeforeReturnOrderByOrderNo(ctx, orderNo)
	if err != nil {
		err = errors.Wrap(err, "failed to get order")
		srv.logger.Error("‚ùå Failed to get order", zap.String("OrderNo", orderNo), zap.Error(err))
		logFinish("Failed", err)
		return nil, err
	}
	if order == nil {
		err := fmt.Errorf("‚ö†Ô∏è Order not found: %s", orderNo)
		srv.logger.Warn("‚ö†Ô∏è Order not found", zap.String("OrderNo", orderNo))
		logFinish("Not Found", err)
		return nil, err
	}

	// ‚úÖ 2. Ensure required fields are not nil
	if order.IsCNCreated == nil || order.IsEdited == nil {
		err := fmt.Errorf("‚ùå Missing required fields in BeforeReturnOrder (IsCNCreated or IsEdited is nil)")
		srv.logger.Error("‚ùå Missing fields in BeforeReturnOrder", zap.String("OrderNo", orderNo), zap.Error(err))
		logFinish("Failed", err)
		return nil, err
	}

	// ‚úÖ 3. Validate RoleID and Determine Status Updates
	var statusReturnID, statusConfID int

	switch roleID {
	case 2: // ACCOUNTING
		if order.IsCNCreated != nil && !*order.IsCNCreated {
			// If CN is not created
			statusReturnID = 1 // Pending
			statusConfID = 1   // Draft
		} else {
			// CN already created, confirmation is allowed
			statusReturnID = 3 // Booking
			statusConfID = 2   // Confirm
		}
	case 3: // WAREHOUSE
		if order.IsEdited != nil && !*order.IsEdited {
			// No edits, direct confirmation
			statusReturnID = 3 // Booking
			statusConfID = 2   // Confirm
		} else {
			// Edits made, confirmation is not allowed
			statusReturnID = 1 // Pending
			statusConfID = 1   // Draft
		}
	default:
		// ‚úÖ ‡∏ñ‡πâ‡∏≤ Role ‡∏≠‡∏∑‡πà‡∏ô ‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà Accounting ‡∏´‡∏£‡∏∑‡∏≠ Warehouse ‡πÉ‡∏´‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
		srv.logger.Warn("‚ö†Ô∏è Role has limited confirmation permissions - Defaulting to Pending/Draft",
			zap.Int("RoleID", roleID),
			zap.String("OrderNo", orderNo),
		)

		statusReturnID = 1 // Pending
		statusConfID = 1   // Draft
	}

	// ‚úÖ 4. Log Determined Status Before Updating
	srv.logger.Info("üìù Determined Status",
		zap.String("OrderNo", orderNo),
		zap.Int("RoleID", roleID),
		zap.Int("StatusReturnID", statusReturnID),
		zap.Int("StatusConfID", statusConfID),
		zap.String("ConfirmBy", userID),
	)

	// ‚úÖ 5. Call Repository Layer to Update Status
	err = srv.beforeReturnRepo.ConfirmSaleReturn(ctx, orderNo, statusReturnID, statusConfID, userID)
	if err != nil {
		err = errors.Wrap(err, "failed to update return order status")
		srv.logger.Error("‚ùå Failed to update return order status", zap.String("OrderNo", orderNo), zap.Error(err))
		logFinish("Failed", err)
		return nil, err
	}

	// ‚úÖ 6. Construct Response
	response := &response.ConfirmSaleReturnResponse{
		RefID:          orderNo,
		StatusReturnID: statusReturnID,
		StatusConfID:   statusConfID,
		ConfirmBy:      userID,
		ConfirmDate:    time.Now(),
	}

	// ü™Ñ Logging Success
	srv.logger.Info("‚úÖ Sale return order confirmed successfully",
		zap.String("OrderNo", orderNo),
		zap.Int("RoleID", roleID),
		zap.String("ConfirmedBy", userID),
		zap.Time("ConfirmedDate", response.ConfirmDate),
	)
	logFinish("Success", nil)

	return response, nil
}

func (srv service) CancelSaleReturn(ctx context.Context, req request.CancelSaleReturn, userID string) (*response.CancelSaleReturnResponse, error) {
	logFinish := srv.logger.LogAPICall(ctx, "CancelSaleReturn", zap.String("OrderNo", req.OrderNo), zap.String("UpdateBy", userID))
	defer func() { logFinish("Completed", nil) }()

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Input
	if strings.TrimSpace(req.OrderNo) == "" || strings.TrimSpace(req.Remark) == "" || strings.TrimSpace(userID) == "" {
		err := errors.New("orderNo, updateBy, and remark are required")
		srv.logger.Error("‚ùå Invalid input", zap.Error(err))
		logFinish("Failed", err)
		return nil, err
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	order, err := srv.beforeReturnRepo.GetBeforeReturnOrderByOrderNo(ctx, req.OrderNo)
	if err != nil {
		err = errors.Wrap(err, "failed to get order")
		srv.logger.Error("‚ùå Failed to get order", zap.String("OrderNo", req.OrderNo), zap.Error(err))
		logFinish("Failed", err)
		return nil, err
	}
	if order == nil {
		err := fmt.Errorf("order not found: %s", req.OrderNo)
		srv.logger.Warn("‚ö†Ô∏è Order not found", zap.String("OrderNo", req.OrderNo))
		logFinish("Not Found", err)
		return nil, err
	}

	// ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Repository Layer (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏±‡∏ö `CancelID`)
	err = srv.beforeReturnRepo.CancelSaleReturn(ctx, req, userID)
	if err != nil {
		err = errors.Wrap(err, "failed to cancel order")
		srv.logger.Error("‚ùå Failed to cancel order", zap.String("OrderNo", req.OrderNo), zap.Error(err))
		logFinish("Failed", err)
		return nil, err
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Response (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ CancelID)
	response := &response.CancelSaleReturnResponse{
		RefID:        req.OrderNo,
		CancelStatus: true,
		CancelBy:     userID,
		Remark:       req.Remark,
		CancelDate:   time.Now(),
	}

	// ü™Ñ Logging Success
	srv.logger.Info("‚úÖ Order canceled successfully", zap.String("OrderNo", req.OrderNo), zap.String("CanceledBy", userID))
	logFinish("Success", nil)

	return response, nil
}

func (srv service) DeleteBeforeReturnOrderLine(ctx context.Context, recID string) error {
	if recID == "" {
		return fmt.Errorf("RecID is required")
	}

	// ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Repository Layer
	err := srv.beforeReturnRepo.DeleteBeforeReturnOrderLine(ctx, recID)
	if err != nil {
		return fmt.Errorf("failed to delete before return order line: %w", err)
	}

	return nil
}

// ‡πÉ‡∏ä‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Create of BeforeReturnOrder
func (srv service) ValidateCreate(req request.BeforeReturnOrder) error {
	// 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
	if req.OrderNo == "" {
		return fmt.Errorf("order number is required")
	}
	if req.SoNo == "" {
		return fmt.Errorf("SO number is required")
	}
	if req.CustomerID == "" {
		return fmt.Errorf("customer ID is required")
	}

	// 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0
	if req.ChannelID <= 0 {
		return fmt.Errorf("invalid channel ID")
	}
	if req.WarehouseID <= 0 {
		return fmt.Errorf("invalid warehouse ID")
	}

	// 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ReturnType
	/* validReturnTypes := map[string]bool{
		"NORMAL": true,
		"DAMAGE": true,
		// ‡πÄ‡∏û‡∏¥‡πà‡∏° type ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ï‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
	}
	if !validReturnTypes[req.ReturnType] {
		return fmt.Errorf("invalid return type: %s", req.ReturnType)
	} */

	// 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö order lines
	if len(req.BeforeReturnOrderLines) == 0 {
		return fmt.Errorf("at least one order line is required")
	}

	for i, line := range req.BeforeReturnOrderLines {
		if line.SKU == "" {
			return fmt.Errorf("SKU is required for line %d", i+1)
		}
		if line.ItemName == "" {
			return fmt.Errorf("ItemName is required for line %d", i+1)
		}
		if line.QTY <= 0 {
			return fmt.Errorf("quantity must be greater than 0 for line %d", i+1)
		}
		if line.ReturnQTY < 0 {
			return fmt.Errorf("return quantity cannot be negative for line %d", i+1)
		}
		if line.ReturnQTY > line.QTY {
			return fmt.Errorf("return quantity cannot be greater than quantity for line %d", i+1)
		}
		if line.Price < 0 {
			return fmt.Errorf("price cannot be negative for line %d", i+1)
		}
		// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö AlterSKU ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
		if line.AlterSKU != nil && *line.AlterSKU == "" {
			return fmt.Errorf("alter SKU cannot be empty if provided for line %d", i+1)
		}
	}

	return nil
}

// create trade , set statusReturnID = 3 (booking)
func (srv service) CreateTradeReturn(ctx context.Context, req request.BeforeReturnOrder) (*response.BeforeReturnOrderResponse, error) {
	srv.logger.Info("üèÅ Starting order creation process", zap.String("OrderNo", req.OrderNo))
	srv.logger.Debug("Creating order head", zap.String("OrderNo", req.OrderNo), zap.String("SoNo", req.SoNo))

	// Validate request
	if err := srv.ValidateCreate(req); err != nil {
		srv.logger.Error("Invalid request", zap.Error(err))
		return nil, fmt.Errorf("validation failed: %w", err)
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ order ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	existingOrder, err := srv.beforeReturnRepo.GetBeforeReturnOrderByOrderNo(ctx, req.OrderNo)
	if err != nil {
		srv.logger.Error("Failed to check existing order", zap.Error(err))
		return nil, err
	}
	if existingOrder != nil {
		return nil, fmt.Errorf("order already exists: %s", req.OrderNo)
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á trade return order
	createdOrder, err := srv.beforeReturnRepo.CreateTradeReturn(ctx, req)
	if err != nil {
		srv.logger.Error("‚ùå Failed to create trade return order", zap.Error(err))
		return nil, err
	}

	srv.logger.Info("‚úÖ Successfully created order with lines",
		zap.String("OrderNo", req.OrderNo))
	return createdOrder, nil
}

// add line create trade
func (srv service) CreateTradeReturnLine(ctx context.Context, orderNo string, lines request.TradeReturnLine) ([]response.BeforeReturnOrderLineResponse, error) {

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö OrderNo ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡πà‡∏≤‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	exists, err := srv.beforeReturnRepo.CheckBefOrderNoExists(ctx, orderNo)
	if err != nil {
		return nil, fmt.Errorf("failed to check order existence: %w", err)
	}
	if !exists {
		return nil, fmt.Errorf("order not found: %s", orderNo)
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô BeforeReturnOrderLine
	err = srv.beforeReturnRepo.CreateTradeReturnLine(ctx, orderNo, lines.TradeReturnLine)
	if err != nil {
		return nil, fmt.Errorf("‚ùå Failed to create trade return line: %w", err)
	}

	// ‡∏™‡∏£‡πâ‡∏≤‡∏á trade return order
	createdOrderLines, err := srv.beforeReturnRepo.GetBeforeReturnOrderLineByOrderNo(ctx, orderNo)
	if err != nil {
		srv.logger.Error("‚ùå Failed to create trade return order", zap.Error(err))
		return nil, err
	}

	srv.logger.Info("‚úÖ Successfully created order lines",
		zap.String("OrderNo", orderNo))
	return createdOrderLines, nil
}

func (srv service) ConfirmReceipt(ctx context.Context, req request.ConfirmTradeReturnRequest, updateBy string) error {
	srv.logger.Info("üèÅ Starting trade return confirmation process",
		zap.String("Identifier", req.Identifier),
		zap.String("UpdateBy", updateBy))

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
	if req.Identifier == "" || updateBy == "" {
		return fmt.Errorf("identifier (OrderNo or TrackingNo) and updateBy are required")
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ orderNo or trackingNo ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BeforeReturnOrder ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	exists, err := srv.beforeReturnRepo.CheckBefOrderOrTrackingExists(ctx, req.Identifier)
	if err != nil {
		return fmt.Errorf("failed to check orderNo or trackingNo existence: %w", err)
	}
	if !exists {
		return fmt.Errorf("orderNo or trackingNo not found: %s", req.Identifier)
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ sku ‡∏ó‡∏µ‡πà Identifier ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏Ñ‡∏•‡∏±‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
	for _, line := range req.ImportLines {
		exists, err := srv.beforeReturnRepo.CheckBefLineSKUExists(ctx, req.Identifier, line.SKU)
		if err != nil {
			return fmt.Errorf("failed to check SKU existence: %w", err)
		}
		if !exists {
			return fmt.Errorf("SKU %s does not exist in BeforeReturnOrderLine for Identifier %s", line.SKU, req.Identifier)
		}
	}

	// 1. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô BeforeReturnOrder
	if err := srv.beforeReturnRepo.UpdateBefToWaiting(ctx, req, updateBy); err != nil {
		return fmt.Errorf("failed to update BeforeReturnOrder: %w", err)
	}

	// 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å BeforeReturnOrder
	returnOrderData, err := srv.beforeReturnRepo.GetBeforeReturnOrderData(ctx, req)
	if err != nil {
		return fmt.Errorf("failed to fetch BeforeReturnOrder: %w", err)
	}

	// ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö StatusCheckID ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ waiting ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏î
	returnOrderData.StatusCheckID = 1

	// 3. Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô ReturnOrder
	if err := srv.beforeReturnRepo.InsertReturnOrder(ctx, returnOrderData); err != nil {
		return fmt.Errorf("failed to insert into ReturnOrder: %w", err)
	}

	// 4. Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å importLines ‡∏•‡∏á‡πÉ‡∏ô ReturnOrderLine + Check ‡∏ß‡πà‡∏≤ SKU ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ô BeforeOD ‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏î‡πâ
	if err := srv.beforeReturnRepo.InsertReturnOrderLine(ctx, returnOrderData, req); err != nil {
		return fmt.Errorf("failed to insert into ReturnOrderLine: %w", err)
	}

	// 5. Insert ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÉ‡∏ô Images (‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û)
	if err := srv.beforeReturnRepo.InsertImages(ctx, returnOrderData, req); err != nil {
		return fmt.Errorf("failed to insert images: %w", err)
	}

	srv.logger.Info("‚úÖ Successfully confirmed trade return",
		zap.String("Identifier", req.Identifier),
		zap.String("UpdateBy", updateBy))

	return nil
}

// check trade line from scan => confirm => success (unsuccess in process future..)
func (srv service) ConfirmReturn(ctx context.Context, req request.ConfirmToReturnRequest, updateBy string) error {
	srv.logger.Info("üèÅ Starting return confirmation process",
		zap.String("OrderNo", req.OrderNo),
		zap.String("UpdateBy", updateBy))

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ OrderNo ‡πÅ‡∏•‡∏∞ UpdateBy ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if req.OrderNo == "" || updateBy == "" {
		return fmt.Errorf("OrderNo and UpdateBy are required")
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ OrderNo ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô BeforeReturn ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	exists, err := srv.beforeReturnRepo.CheckBefOrderNoExists(ctx, req.OrderNo)
	if err != nil {
		return fmt.Errorf("failed to check order existence: %w", err)
	}
	if !exists {
		return fmt.Errorf("OrderNo does not exist in BeforeReturnOrder")
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö SKU
	for _, line := range req.ImportLinesActual {
		if line.SKU == "" {
			return fmt.Errorf("SKU is required")
		}
		exists, err := srv.beforeReturnRepo.CheckReLineSKUExists(ctx, req.OrderNo, line.SKU)
		if err != nil {
			return fmt.Errorf("failed to check SKU existence: %w", err)
		}
		if !exists {
			return fmt.Errorf("SKU %s does not exist in ReturnOrderLine for OrderNo %s", line.SKU, req.OrderNo)
		}
	}

	// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï BeforeReturnOrder
	if err := srv.beforeReturnRepo.UpdateStatusToSuccess(ctx, req.OrderNo, updateBy); err != nil {
		return fmt.Errorf("failed to update BeforeReturnOrder: %w", err)
	}

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BeforeReturnOrder
	beforeReturnOrder, err := srv.beforeReturnRepo.GetBeforeOrderDetails(ctx, req.OrderNo)
	if err != nil {
		return fmt.Errorf("failed to fetch BeforeReturnOrder details: %w", err)
	}

	// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ReturnOrder ‡πÅ‡∏•‡∏∞ ReturnOrderLine
	if err := srv.beforeReturnRepo.UpdateReturnOrderAndLines(ctx, req, beforeReturnOrder); err != nil {
		return fmt.Errorf("failed to update ReturnOrder and ReturnOrderLine: %w", err)
	}

	srv.logger.Info("‚úÖ Successfully confirmed return",
		zap.String("OrderNo", req.OrderNo),
		zap.String("UpdateBy", updateBy))
	return nil
}

func (srv service) GetAllOrderDetail(ctx context.Context) ([]response.OrderDetail, error) {
	allorder, err := srv.beforeReturnRepo.GetAllOrderDetail(ctx)
	if err != nil {
		switch err {
		case sql.ErrNoRows:
			srv.logger.Error(err)
			return nil, fmt.Errorf("no order data: %w", err)
		default:
			srv.logger.Error(err)
			return nil, fmt.Errorf("get order error: %w", err)
		}
	}
	return allorder, nil
}

func (srv service) GetAllOrderDetails(ctx context.Context, page, limit int) ([]response.OrderDetail, error) {
	offset := (page - 1) * limit

	allorder, err := srv.beforeReturnRepo.GetAllOrderDetails(ctx, offset, limit)
	if err != nil {
		switch err {
		case sql.ErrNoRows:
			srv.logger.Error(err)
			return nil, fmt.Errorf("no order data: %w", err)
		default:
			srv.logger.Error(err)
			return nil, fmt.Errorf("get order error: %w", err)
		}
	}
	return allorder, nil
}

func (srv service) GetOrderDetailBySO(ctx context.Context, soNo string) (*response.OrderDetail, error) {
	soOrder, err := srv.beforeReturnRepo.GetOrderDetailBySO(ctx, soNo)
	if err != nil {
		return nil, err
	}
	return soOrder, nil
}

// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Before Return Order ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö Lines
func (srv service) CreateBeforeReturnOrderWithLines(ctx context.Context, req request.BeforeReturnOrder) (*response.BeforeReturnOrderResponse, error) {
	srv.logger.Info("üîé Starting order creation process", zap.String("OrderNo", req.OrderNo))                  // Logging ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á order
	srv.logger.Debug("Creating order head", zap.String("OrderNo", req.OrderNo), zap.String("SoNo", req.SoNo)) // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á order head

	err := srv.beforeReturnRepo.CreateBeforeReturnOrderWithTransaction(ctx, req) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á order ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö transaction
	if err != nil {
		srv.logger.Error("‚ùå Failed to create order with lines", zap.Error(err)) // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á order ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
		return nil, err
	}

	createdOrder, err := srv.beforeReturnRepo.GetBeforeReturnOrderByOrderNo(ctx, req.OrderNo) // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
	if err != nil {
		srv.logger.Error("‚ùå Failed to fetch created order", zap.Error(err)) // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
		return nil, err
	}

	srv.logger.Info("‚úÖ Successfully created order with lines", zap.String("OrderNo", req.OrderNo)) // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á order ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	return createdOrder, nil
}

// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Before Return Order ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö Lines
func (srv service) UpdateBeforeReturnOrderWithLines(ctx context.Context, req request.BeforeReturnOrder) (*response.BeforeReturnOrderResponse, error) {
	srv.logger.Info("üîé Starting order update process", zap.String("OrderNo", req.OrderNo))                    // Logging ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó order
	srv.logger.Debug("Updating order head", zap.String("OrderNo", req.OrderNo), zap.String("SoNo", req.SoNo)) // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó order head

	err := srv.beforeReturnRepo.UpdateBeforeReturnOrderWithTransaction(ctx, req) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó order ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ö transaction
	if err != nil {
		srv.logger.Error("‚ùå Failed to update order with lines", zap.Error(err)) // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó order ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
		return nil, err
	}

	updatedOrder, err := srv.beforeReturnRepo.GetBeforeReturnOrderByOrderNo(ctx, req.OrderNo) // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
	if err != nil {
		srv.logger.Error("‚ùå Failed to fetch updated order", zap.Error(err)) // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
		return nil, err
	}

	srv.logger.Info("‚úÖ Successfully updated order with lines", zap.String("OrderNo", req.OrderNo)) // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó order ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	return updatedOrder, nil
}

// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Before Return Orders ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
func (srv service) ListBeforeReturnOrders(ctx context.Context) ([]response.BeforeReturnOrderResponse, error) {
	srv.logger.Info("üîé Starting to list all return orders")         // Logging ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ return orders ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	orders, err := srv.beforeReturnRepo.ListBeforeReturnOrders(ctx) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ return orders ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	if err != nil {
		srv.logger.Error("‚ùå Failed to list return orders", zap.Error(err)) // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ return orders ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
		return nil, err
	}
	srv.logger.Info("‚úÖ Successfully listed return orders") // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ return orders ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	return orders, nil
}

// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á Before Return Order ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ OrderNo
func (srv service) GetBeforeReturnOrderByOrderNo(ctx context.Context, orderNo string) (*response.BeforeReturnOrderResponse, error) {
	srv.logger.Info("üîé Starting to get return order by order number", zap.String("OrderNo", orderNo)) // Logging ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á return order ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ order number
	order, err := srv.beforeReturnRepo.GetBeforeReturnOrderByOrderNo(ctx, orderNo)                    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á return order ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ order number
	if err != nil {
		srv.logger.Error("‚ùå Failed to get return order by order number", zap.Error(err)) // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á return order ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
		return nil, err
	}
	return order, nil
}

// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Before Return Order Lines ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
func (srv service) ListBeforeReturnOrderLines(ctx context.Context) ([]response.BeforeReturnOrderLineResponse, error) {
	srv.logger.Info("üîé Starting to list all return order lines")       // Logging ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ return order lines ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	lines, err := srv.beforeReturnRepo.ListBeforeReturnOrderLines(ctx) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ return order lines ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	if err != nil {
		srv.logger.Error("‚ùå Failed to list return order lines", zap.Error(err)) // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ return order lines ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
		return nil, err
	}
	srv.logger.Info("‚úÖ Successfully listed return order lines") // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ return order lines ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	return lines, nil
}

// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á Before Return Order Lines ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ OrderNo
func (srv service) GetBeforeReturnOrderLineByOrderNo(ctx context.Context, orderNo string) ([]response.BeforeReturnOrderLineResponse, error) {
	srv.logger.Info("üîé Starting to get return order lines by order number", zap.String("OrderNo", orderNo)) // Logging ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á return order lines ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ order number
	lines, err := srv.beforeReturnRepo.GetBeforeReturnOrderLineByOrderNo(ctx, orderNo)                      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á return order lines ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ order number
	if err != nil {
		srv.logger.Error("‚ùå Failed to get return order lines by order number", zap.Error(err)) // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á return order lines ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
		return nil, err
	}
	srv.logger.Info("‚úÖ Successfully fetched return order lines") // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á return order lines ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	return lines, nil
}

// Draft & Confirm MKP üö®//
// ListDraftOrders ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Draft Status Orders üöó
func (srv service) ListDraftOrders(ctx context.Context, startDate, endDate string) ([]response.ListDraftConfirmOrdersResponse, error) {
	logFinish := srv.logger.LogAPICall(ctx, "ListDraftOrders")
	defer logFinish("Completed", nil)

	srv.logger.Info("üîé Fetching all draft orders...",
		zap.String("method", "ListDraftOrders"),
		zap.String("startDate", startDate),
		zap.String("endDate", endDate),
	)

	// üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ startDate < endDate ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	start, err := time.Parse("2006-01-02", startDate)
	if err != nil {
		srv.logger.Warn("‚ö†Ô∏è Invalid startDate format ‚ö†Ô∏è", zap.String("startDate", startDate))
		logFinish("Failed", err)
		return nil, fmt.Errorf("invalid startDate format (expected YYYY-MM-DD): %w", err)
	}

	end, err := time.Parse("2006-01-02", endDate)
	if err != nil {
		srv.logger.Warn("‚ö†Ô∏è Invalid endDate format ‚ö†Ô∏è", zap.String("endDate", endDate))
		logFinish("Failed", err)
		return nil, fmt.Errorf("invalid endDate format (expected YYYY-MM-DD): %w", err)
	}

	if start.After(end) {
		srv.logger.Warn("‚ö†Ô∏è startDate cannot be after endDate ‚ö†Ô∏è",
			zap.String("startDate", startDate),
			zap.String("endDate", endDate),
		)
		logFinish("Failed", fmt.Errorf("startDate cannot be after endDate"))
		return nil, fmt.Errorf("startDate cannot be after endDate")
	}

	// üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Repository Layer
	orders, err := srv.beforeReturnRepo.ListDraftOrders(ctx, startDate, endDate)
	if err != nil {
		srv.logger.Error("‚ùå Failed to list draft orders",
			zap.Error(err),
			zap.String("startDate", startDate),
			zap.String("endDate", endDate),
		)
		logFinish("Failed", err)
		return nil, fmt.Errorf("ListDraftOrders failed: %w", err)
	}

	srv.logger.Info("‚úÖ Successfully retrieved draft orders",
		zap.Int("count", len(orders)),
		zap.String("startDate", startDate),
		zap.String("endDate", endDate),
	)
	logFinish(fmt.Sprintf("Success - %d orders", len(orders)), nil)

	return orders, nil
}

// ListConfirmOrders ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Confirm Satus Orders üöó
func (srv service) ListConfirmOrders(ctx context.Context, startDate, endDate string) ([]response.ListDraftConfirmOrdersResponse, error) {
	logFinish := srv.logger.LogAPICall(ctx, "ListConfirmOrders")
	defer logFinish("Completed", nil)

	srv.logger.Info("üîé Fetching all confirm orders...",
		zap.String("startDate", startDate),
		zap.String("endDate", endDate),
	)

	// üìå ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ startDate < endDate ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	start, err := time.Parse("2006-01-02", startDate)
	if err != nil {
		srv.logger.Warn("‚ö†Ô∏è Invalid startDate format ‚ö†Ô∏è", zap.String("startDate", startDate))
		logFinish("Failed", err)
		return nil, fmt.Errorf("invalid startDate format (expected YYYY-MM-DD): %w", err)
	}

	end, err := time.Parse("2006-01-02", endDate)
	if err != nil {
		srv.logger.Warn("‚ö†Ô∏è Invalid endDate format ‚ö†Ô∏è", zap.String("endDate", endDate))
		logFinish("Failed", err)
		return nil, fmt.Errorf("invalid endDate format (expected YYYY-MM-DD): %w", err)
	}

	if start.After(end) {
		srv.logger.Warn("‚ö†Ô∏è startDate cannot be after endDate ‚ö†Ô∏è",
			zap.String("startDate", startDate),
			zap.String("endDate", endDate),
		)
		logFinish("Failed", fmt.Errorf("startDate cannot be after endDate"))
		return nil, fmt.Errorf("startDate cannot be after endDate")
	}

	// üìå ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Repository Layer
	orders, err := srv.beforeReturnRepo.ListConfirmOrders(ctx, startDate, endDate)
	if err != nil {
		srv.logger.Error("‚ùå Failed to list confirm orders",
			zap.Error(err),
			zap.String("startDate", startDate),
			zap.String("endDate", endDate),
		)
		logFinish("Failed", err)
		return nil, fmt.Errorf("ListConfirmOrders failed: %w", err)
	}

	srv.logger.Info("‚úÖ Successfully retrieved confirm orders",
		zap.Int("count", len(orders)),
		zap.String("startDate", startDate),
		zap.String("endDate", endDate),
	)
	logFinish(fmt.Sprintf("Success - %d orders", len(orders)), nil)

	return orders, nil
}

// GetDraftConfirmOrderByOrderNo ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Order ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥ Logging üöó
func (srv service) GetDraftConfirmOrderByOrderNo(ctx context.Context, orderNo string) (*response.DraftHeadResponse, error) {
	logFinish := srv.logger.LogAPICall(ctx, "GetDraftConfirmOrderByOrderNo")
	defer logFinish("Completed", nil)

	srv.logger.Info("üîé Fetching Draft Confirm Order...", zap.String("orderNo", orderNo))

	// üìå ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Repository Layer
	order, err := srv.beforeReturnRepo.GetDraftConfirmOrderByOrderNo(ctx, orderNo)
	if err != nil {
		srv.logger.Error("‚ùå Failed to get Draft Confirm Order", zap.String("orderNo", orderNo), zap.Error(err))
		logFinish("Failed", err)
		return nil, err
	}

	srv.logger.Info("‚úÖ Successfully retrieved Draft Confirm Order", zap.String("orderNo", orderNo), zap.Int("lineCount", len(order.OrderLines)))
	logFinish("Success", nil)

	return order, nil
}

// ListCodeR ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ CodeR ‡∏ó‡∏µ‡πà‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ 'R' üöó
func (srv service) ListCodeR(ctx context.Context) ([]response.ListCodeRResponse, error) {
	logFinish := srv.logger.LogAPICall(ctx, "ListCodeR")
	defer logFinish("Completed", nil)

	srv.logger.Info("üîé Fetching all CodeR from ROM_V_ProductAll (WHERE SKU LIKE 'R%')...")

	codeRList, err := srv.beforeReturnRepo.ListCodeR(ctx)
	if err != nil {
		srv.logger.Error("‚ùå Failed to list CodeR", zap.Error(err))
		logFinish("Failed", err)
		return nil, fmt.Errorf("ListCodeR failed: %w", err)
	}

	srv.logger.Info("‚úÖ Successfully retrieved CodeR list", zap.Int("count", len(codeRList)))
	logFinish(fmt.Sprintf("Success - %d CodeR", len(codeRList)), nil)

	return codeRList, nil
}

func (srv service) AddCodeR(ctx context.Context, req request.AddCodeR, userID string) ([]response.AddCodeRResponse, error) {
	logFinish := srv.logger.LogAPICall(ctx, "AddCodeR")
	defer logFinish("Completed", nil)

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ `QTY` ‡πÅ‡∏•‡∏∞ `Price` (‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ö‡∏ß‡∏Å)
	if req.QTY <= 0 || req.Price <= 0 {
		srv.logger.Warn("‚ö†Ô∏è Invalid QTY or Price",
			zap.Int("qty", req.QTY),
			zap.Float64("price", req.Price),
		)
		logFinish("Failed - Invalid QTY or Price", nil)
		return nil, fmt.Errorf("invalid QTY (%d) or Price (%.2f)", req.QTY, req.Price)
	}

	// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ `ReturnQTY = QTY`
	req.ReturnQTY = req.QTY

	srv.logger.Info("‚ûï Adding new CodeR...",
		zap.String("orderNo", req.OrderNo),
		zap.String("sku", req.SKU),
		zap.String("itemName", req.ItemName),
		zap.Int("qty", req.QTY),
		zap.Float64("price", req.Price),
		zap.String("createBy", userID),
	)

	// ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Repository Layer
	results, err := srv.beforeReturnRepo.AddCodeR(ctx, req)
	if err != nil {
		srv.logger.Error("‚ùå Failed to add CodeR", zap.Error(err))
		logFinish("Failed", err)
		return nil, fmt.Errorf("AddCodeR failed: %w", err)
	}

	srv.logger.Info("‚úÖ Successfully added CodeR", zap.Int("count", len(results)))
	logFinish(fmt.Sprintf("Success - %d records", len(results)), nil)

	return results, nil
}

func (srv service) DeleteCodeR(ctx context.Context, orderNo string, sku string, userID string) error {
	logFinish := srv.logger.LogAPICall(ctx, "DeleteCodeR")
	defer logFinish("Completed", nil)

	srv.logger.Info("üóëÔ∏è Deleting CodeR...",
		zap.String("orderNo", orderNo),
		zap.String("sku", sku),
		zap.String("deletedBy", userID),
	)

	// ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Repository Layer
	rowsAffected, err := srv.beforeReturnRepo.DeleteCodeR(ctx, orderNo, sku)
	if err != nil {
		srv.logger.Error("‚ùå Failed to delete CodeR", zap.Error(err))
		logFinish("Failed", err)
		return fmt.Errorf("DeleteCodeR failed: %w", err)
	}

	// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	if rowsAffected == 0 {
		srv.logger.Warn("‚ö†Ô∏è CodeR not found", zap.String("orderNo", orderNo), zap.String("sku", sku))
		return fmt.Errorf("no CodeR found with OrderNo: %s and SKU: %s", orderNo, sku)
	}

	srv.logger.Info("‚úÖ Successfully deleted CodeR",
		zap.String("orderNo", orderNo),
		zap.String("sku", sku),
		zap.Int64("rowsAffected", rowsAffected),
	)

	logFinish(fmt.Sprintf("Success - Deleted %d rows", rowsAffected), nil)
	return nil
}

// Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Draft Order
func (srv service) UpdateDraftOrder(ctx context.Context, orderNo string, userID string) (*response.UpdateOrderStatusResponse, error) {
	logFinish := srv.logger.LogAPICall(ctx, "UpdateDraftOrder", zap.String("OrderNo", orderNo), zap.String("UserID", userID))
	defer logFinish("Completed", nil)

	srv.logger.Info("üîé Starting draft order update process üîé", zap.String("OrderNo", orderNo))

	// ‚úÖ Update order status
	updatedOrder, err := srv.beforeReturnRepo.UpdateOrderStatus(ctx, orderNo, 2, 3, userID) // StatusConfID = 2 (Confirm), StatusReturnID = 3 (Booking)
	if err != nil {
		logFinish("Failed", err)
		srv.logger.Error("‚ùå Failed to update order status", zap.Error(err))
		return nil, err
	}

	srv.logger.Info("‚úÖ Successfully updated draft order",
		zap.String("OrderNo", updatedOrder.OrderNo),
		zap.Int("StatusConfID", updatedOrder.StatusConfID),
		zap.Int("StatusReturnID", updatedOrder.StatusReturnID),
		zap.String("UpdateBy", updatedOrder.UpdateBy),
		zap.Time("UpdateDate", updatedOrder.UpdateDate),
	)

	logFinish("Success", nil)
	return updatedOrder, nil
}
