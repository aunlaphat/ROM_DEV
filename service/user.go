package service

import (
	"context"

	"boilerplate-backend-go/dto/request"
	"boilerplate-backend-go/dto/response"
	"boilerplate-backend-go/errors"
	"boilerplate-backend-go/utils"

	"go.uber.org/zap"
)

type UserService interface {
	GetUser(ctx context.Context, userID string) (response.UserResponse, error)
	GetUsers(ctx context.Context, isActive *bool, limit, offset int) ([]response.UserResponse, error)
	AddUser(ctx context.Context, req request.AddUserRequest, adminID string, roleID int) (*response.AddUserResponse, error)
	EditUser(ctx context.Context, userID string, req request.EditUserRequest, adminID string, roleID int) (*response.EditUserResponse, error)
	DeleteUser(ctx context.Context, userID, adminID string, roleID int) error
	ResetPassword(ctx context.Context, req request.ResetPasswordRequest, adminID string, roleID int) (*response.ResetPasswordResponse, error)
}

// ‚úÖ 1Ô∏è‚É£ GetUser (‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
func (srv service) GetUser(ctx context.Context, userID string) (response.UserResponse, error) {
	srv.logger.Info("üîç Fetching user details", zap.String("userID", userID))

	user, err := srv.userRepo.GetUser(ctx, userID)
	if err != nil {
		srv.logger.Warn("‚ùå User not found", zap.String("userID", userID))
		return response.UserResponse{}, errors.NotFoundError("user not found")
	}

	srv.logger.Info("‚úÖ User details retrieved successfully", zap.String("userID", userID))
	return response.UserResponse(user), nil
}

// ‚úÖ 2Ô∏è‚É£ GetUsers (‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
func (srv service) GetUsers(ctx context.Context, isActive *bool, limit, offset int) ([]response.UserResponse, error) {
	srv.logger.Info("üìã Fetching user list", zap.Int("limit", limit), zap.Int("offset", offset))

	users, err := srv.userRepo.GetUsers(ctx, isActive, limit, offset)
	if err != nil {
		srv.logger.Error("‚ùå Failed to fetch users", zap.Error(err))
		return nil, err
	}

	var userResponses []response.UserResponse
	for _, user := range users {
		userResponses = append(userResponses, response.UserResponse(user))
	}

	srv.logger.Info("‚úÖ Users retrieved successfully", zap.Int("totalUsers", len(userResponses)))
	return userResponses, nil
}

// ‚úÖ 3Ô∏è‚É£ AddUser (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà)
func (srv service) AddUser(ctx context.Context, req request.AddUserRequest, adminID string, roleID int) (*response.AddUserResponse, error) {
	srv.logger.Info("‚ûï Adding new user", zap.String("userID", req.UserID), zap.String("adminID", adminID))

	// üîπ SYSTEM_ADMIN ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
	if roleID != 5 {
		srv.logger.Warn("‚ùå Unauthorized attempt to add user", zap.String("adminID", adminID))
		return nil, errors.UnauthorizedError("you are not allowed to add a new user")
	}

	// üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ User ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô ERP (ROM_V_User)
	exists, err := srv.userRepo.CheckUserExists(ctx, req.UserID)
	if err != nil {
		srv.logger.Error("‚ùå Error checking user existence", zap.Error(err))
		return nil, err
	}
	if !exists {
		srv.logger.Warn("‚ö†Ô∏è User not found in ERP", zap.String("userID", req.UserID))
		return nil, errors.NotFoundError("user not found in ERP")
	}

	// üîπ ‡πÄ‡∏û‡∏¥‡πà‡∏° User ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (UserRole + UserStatus)
	err = srv.userRepo.AddUser(ctx, req.UserID, req.RoleID, adminID)
	if err != nil {
		srv.logger.Error("‚ùå Failed to add user", zap.Error(err))
		return nil, err
	}

	srv.logger.Info("‚úÖ User added successfully", zap.String("userID", req.UserID))
	return &response.AddUserResponse{UserID: req.UserID, RoleID: req.RoleID, CreatedBy: adminID}, nil
}

// ‚úÖ 4Ô∏è‚É£ EditUser (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ)
func (srv service) EditUser(ctx context.Context, userID string, req request.EditUserRequest, adminID string, roleID int) (*response.EditUserResponse, error) {
	srv.logger.Info("‚úèÔ∏è Editing user", zap.String("userID", userID), zap.String("adminID", adminID))

	// üîπ SYSTEM_ADMIN ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Role ‡∏Ç‡∏≠‡∏á User ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ
	if roleID != 5 {
		srv.logger.Warn("‚ùå Unauthorized access", zap.String("adminID", adminID))
		return nil, errors.UnauthorizedError("you are not allowed to edit this user")
	}

	// üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Role ‡∏Ç‡∏≠‡∏á User
	err := srv.userRepo.EditUser(ctx, userID, req.RoleID, adminID)
	if err != nil {
		srv.logger.Error("‚ùå Failed to edit user", zap.Error(err))
		return nil, err
	}

	srv.logger.Info("‚úÖ User edited successfully", zap.String("userID", userID))
	return &response.EditUserResponse{UserID: userID, NewRoleID: req.RoleID, UpdatedBy: adminID}, nil
}

// ‚úÖ 5Ô∏è‚É£ DeleteUser (‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö Soft Delete)
func (srv service) DeleteUser(ctx context.Context, userID, adminID string, roleID int) error {
	srv.logger.Info("üóëÔ∏è Deleting user", zap.String("userID", userID), zap.String("adminID", adminID))

	// üîπ SYSTEM_ADMIN ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
	if roleID != 5 {
		srv.logger.Warn("‚ùå Unauthorized delete attempt", zap.String("adminID", adminID))
		return errors.UnauthorizedError("you are not allowed to delete this user")
	}

	// üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï IsActive ‡πÄ‡∏õ‡πá‡∏ô 0 (Soft Delete)
	err := srv.userRepo.DeleteUser(ctx, userID, adminID)
	if err != nil {
		srv.logger.Error("‚ùå Failed to delete user", zap.Error(err))
		return err
	}

	srv.logger.Info("‚úÖ User deleted successfully", zap.String("userID", userID))
	return nil
}

// ‚úÖ 6Ô∏è‚É£ ResetPassword (‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô)
func (srv service) ResetPassword(ctx context.Context, req request.ResetPasswordRequest, adminID string, roleID int) (*response.ResetPasswordResponse, error) {
	srv.logger.Info("üîÑ Resetting password", zap.String("userID", req.UserID), zap.String("adminID", adminID))

	// üîπ SYSTEM_ADMIN ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ Reset Password ‡∏Ç‡∏≠‡∏á User ‡∏≠‡∏∑‡πà‡∏ô‡πÑ‡∏î‡πâ
	if adminID != req.UserID && roleID != 5 {
		srv.logger.Warn("üö´ Unauthorized access", zap.String("adminID", adminID))
		return nil, errors.UnauthorizedError("you are not authorized to reset another user's password")
	}

	// üîπ Hash ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
	hashedPassword := utils.HashPassword(req.NewPassword)

	// üîπ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
	err := srv.userRepo.UpdateUserPassword(ctx, req.UserID, hashedPassword, adminID)
	if err != nil {
		srv.logger.Error("‚ùå Failed to reset password", zap.Error(err))
		return nil, err
	}

	srv.logger.Info("‚úÖ Password reset successfully", zap.String("userID", req.UserID))
	return &response.ResetPasswordResponse{UserID: req.UserID, UpdatedBy: adminID}, nil
}
