package service

import (
	request "boilerplate-backend-go/dto/request"
	response "boilerplate-backend-go/dto/response"
	"boilerplate-backend-go/errors"
	"boilerplate-backend-go/utils"
	"context"
	"fmt"

	"go.uber.org/zap"
)

type ReturnOrderService interface {
	GetAllReturnOrder(ctx context.Context) ([]response.ReturnOrder, error)
	GetReturnOrderByOrderNo(ctx context.Context, orderNo string) (*response.ReturnOrder, error)
	GetAllReturnOrderLines(ctx context.Context) ([]response.ReturnOrderLine, error)
	GetReturnOrderLineByOrderNo(ctx context.Context, orderNo string) ([]response.ReturnOrderLine, error)
	CreateReturnOrder(ctx context.Context, req request.CreateReturnOrder) (*response.CreateReturnOrder, error)
	UpdateReturnOrder(ctx context.Context, req request.UpdateReturnOrder, updateBy string) (*response.UpdateReturnOrder, error)
	DeleteReturnOrder(ctx context.Context, orderNo string) error

	GetReturnOrdersByStatus(ctx context.Context, statusCheckID int) ([]response.DraftTradeDetail, error)
	GetReturnOrdersByStatusAndDateRange(ctx context.Context, statusCheckID int, startDate, endDate string) ([]response.DraftTradeDetail, error)
}

// review
func (srv service) GetAllReturnOrder(ctx context.Context) ([]response.ReturnOrder, error) {
	// logFinish := srv.logger.LogAPICall(ctx, "GetAllReturnOrder")
	// defer logFinish("Completed", nil)
	srv.logger.Info("üîé Starting get return order process üîé")

	// Step 1: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ReturnOrder ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	allorder, err := srv.returnOrderRepo.GetAllReturnOrder(ctx)
	if err != nil {
		srv.logger.Error("‚ùå Error fetching all return orders", zap.Error(err))
		return nil, fmt.Errorf("error fetching all return orders: %w", err)
	}

	// ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
	if len(allorder) == 0 {
		srv.logger.Info("No return orders found")
		return []response.ReturnOrder{}, nil
	}

	
	return allorder, nil
}

// review
func (srv service) GetReturnOrderByOrderNo(ctx context.Context, orderNo string) (*response.ReturnOrder, error) {
	// logFinish := srv.logger.LogAPICall(ctx, "GetReturnOrderByOrderNo", zap.String("OrderNo", orderNo))
	// defer logFinish("Completed", nil)
	srv.logger.Info("üîé Starting get return order process üîé", zap.String("OrderNo", orderNo))

	// Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ OrderNo ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
	if orderNo == "" {
		err := fmt.Errorf("‚ùóOrderNo is required")
		srv.logger.Error(err)
		return nil, err
	}

	// Step 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ OrderNo ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô ReturnOrderLine
	exists, err := srv.returnOrderRepo.CheckOrderNoExist(ctx, orderNo)
	if err != nil {
		srv.logger.Error("‚ùå Error checking OrderNo existence", zap.Error(err))
		return nil, fmt.Errorf("error checking OrderNo existence: %w", err)
	}
	if !exists {
		err := fmt.Errorf("‚ö†Ô∏è This OrderNo not found: %s", orderNo)
		srv.logger.Warn("‚ùóOrderNo not found", zap.String("OrderNo", orderNo))
		return nil, err
	}

	// Step 2: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ReturnOrder ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ OrderNo
	idorder, err := srv.returnOrderRepo.GetReturnOrderByOrderNo(ctx, orderNo)
	if err != nil {
		srv.logger.Error("Error fetching ReturnOrder by OrderNo", zap.String("OrderNo", orderNo), zap.Error(err))
		return nil, fmt.Errorf("error fetching ReturnOrder by OrderNo: %s => %w", orderNo, err)
	}

	// ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
	if len(idorder.ReturnOrderLine) == 0 {
		srv.logger.Info("No lines found for this order")
		return idorder, nil
	}

	
	return idorder, nil
}

// review
func (srv service) GetAllReturnOrderLines(ctx context.Context) ([]response.ReturnOrderLine, error) {
	// logFinish := srv.logger.LogAPICall(ctx, "GetAllReturnOrderLines")
	// defer logFinish("Completed", nil)
	srv.logger.Info("üîé Starting get return order lines process üîé")

	lines, err := srv.returnOrderRepo.GetAllReturnOrderLines(ctx)
	if err != nil {
		srv.logger.Error("‚ùå Error fetching all return order lines", zap.Error(err))
		return nil, fmt.Errorf("error fetching all return order lines: %w", err)
	}

	// ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
	if len(lines) == 0 {
		srv.logger.Info("No lines found")
		return lines, nil
	}

	
	return lines, nil
}

// review
func (srv service) GetReturnOrderLineByOrderNo(ctx context.Context, orderNo string) ([]response.ReturnOrderLine, error) {
	// logFinish := srv.logger.LogAPICall(ctx, "GetReturnOrderLineByOrderNo", zap.String("OrderNo", orderNo))
	// defer logFinish("Completed", nil)
	srv.logger.Info("üîé Starting get return order line process üîé", zap.String("OrderNo", orderNo))

	if orderNo == "" {
		err := fmt.Errorf("‚ùó OrderNo is required")
		srv.logger.Error(err)
		return nil, err
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ OrderNo ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô ReturnOrderLine
	exists, err := srv.returnOrderRepo.CheckOrderNoLineExist(ctx, orderNo)
	if err != nil {
		srv.logger.Error("‚ùå Error checking OrderNo existence", zap.Error(err))
		return nil, fmt.Errorf("error checking OrderNo existence: %w", err)
	}
	if !exists {
		err := fmt.Errorf("‚ö†Ô∏è  This Return Order Line not found: %s", orderNo)
		srv.logger.Warn(err.Error())
		return nil, err
	}

	// *Ô∏è‚É£ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ReturnOrderLines
	lines, err := srv.returnOrderRepo.GetReturnOrderLineByOrderNo(ctx, orderNo)
	if err != nil {
		srv.logger.Error("‚ùå Error fetching return order lines by OrderNo", zap.Error(err))
		return nil, fmt.Errorf("error fetching return order lines by OrderNo: %w", err)
	}

	// *Ô∏è‚É£ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
	if len(lines) == 0 {
		srv.logger.Info("No lines found for this order number")
		return lines, nil
	}

	
	return lines, nil
}

// review
func (srv service) GetReturnOrdersByStatus(ctx context.Context, statusCheckID int) ([]response.DraftTradeDetail, error) {
	// logFinish := srv.logger.LogAPICall(ctx, "GetReturnOrdersByStatus", zap.Int("StatusCheckID", statusCheckID))
	// defer logFinish("Completed", nil)
	srv.logger.Info("üîé Starting get return order process üîé", zap.Int("StatusCheckID", statusCheckID))

	orders, err := srv.returnOrderRepo.GetReturnOrdersByStatus(ctx, statusCheckID)
	if err != nil {
		srv.logger.Error("‚ùå Failed to fetch Return Orders", zap.Error(err))
		return nil, errors.InternalError("failed to fetch Return Orders")
	}

	if len(orders) == 0 {
		srv.logger.Info("‚ö†Ô∏è No order found")
		return []response.DraftTradeDetail{}, nil
	}

	srv.logger.Info("‚úÖ Successfully fetched Return Orders", zap.Int("StatusCheckID", statusCheckID), zap.Int("Count", len(orders)))
	return orders, nil
}

// review
func (srv service) GetReturnOrdersByStatusAndDateRange(ctx context.Context, statusCheckID int, startDate, endDate string) ([]response.DraftTradeDetail, error) {
	// logFinish := srv.logger.LogAPICall(ctx, "GetReturnOrdersByStatusAndDateRange", zap.String("StartDate", startDate), zap.String("EndDate", endDate))
	// defer logFinish("Completed", nil)
	srv.logger.Info("üîé Starting get return order from range date process üîé", zap.String("StartDate", startDate), zap.String("EndDate", endDate))

	orders, err := srv.returnOrderRepo.GetReturnOrdersByStatusAndDateRange(ctx, statusCheckID, startDate, endDate)
	if err != nil {
		srv.logger.Error("‚ùå Failed to fetch Return Orders", zap.Int("StatusCheckID", statusCheckID), zap.Error(err))
		return nil, fmt.Errorf("failed to fetch Return Orders: %w", err)
	}

	// *Ô∏è‚É£ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏Ñ‡∏∑‡∏ô‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
	if len(orders) == 0 {
		srv.logger.Info("‚ö†Ô∏è No order found within the specified date range")
		return []response.DraftTradeDetail{}, nil
	}

	srv.logger.Info("‚úÖ Successfully fetched Return Orders", zap.Int("StatusCheckID", statusCheckID), zap.Int("Count", len(orders)))
	return orders, nil
}

// review
func (srv service) CreateReturnOrder(ctx context.Context, req request.CreateReturnOrder) (*response.CreateReturnOrder, error) {
	// logFinish := srv.logger.LogAPICall(ctx, "CreateReturnOrder", zap.String("OrderNo", req.OrderNo))
	// defer logFinish("Completed", nil)
	srv.logger.Info("üîé Starting return order creation process üîé", zap.String("OrderNo", req.OrderNo))

	if len(req.ReturnOrderLine) == 0 {
		err := fmt.Errorf("‚ùóReturnOrderLine cannot be empty")
		srv.logger.Error(err)
		return nil, err
	}

	// *Ô∏è‚É£ Validate request ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
	if err := utils.ValidateCreateReturnOrder(req); err != nil {
		srv.logger.Error("‚ùå Validation failed", zap.Error(err))
		return nil, fmt.Errorf("validation failed: %w", err)
	}

	// *Ô∏è‚É£ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ OrderNo ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	exists, err := srv.returnOrderRepo.CheckOrderNoExist(ctx, req.OrderNo)
	if err != nil {
		
		srv.logger.Error("‚ùå Failed to check OrderNo", zap.Error(err))
		return nil, fmt.Errorf("failed to check OrderNo: %w", err)
	}
	if exists {
		srv.logger.Error("‚ùó OrderNo already exists", zap.Error(err))
		return nil, (fmt.Errorf("‚ùó orderNo already exists: %s", req.OrderNo))
	}

	// ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á database
	err = srv.returnOrderRepo.CreateReturnOrder(ctx, req)
	if err != nil {
		srv.logger.Error("‚ùå Failed to create order with lines", zap.Error(err))
		return nil, fmt.Errorf("failed to create order with lines: %w", err)
	}

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	createdOrder, err := srv.returnOrderRepo.GetCreateReturnOrder(ctx, req.OrderNo)
	if err != nil {
		srv.logger.Error("‚ùå Failed to fetch created order", zap.Error(err))
		return nil, fmt.Errorf("failed to fetch created order: %w", err)
	}

	
	return createdOrder, nil
}

// review
func (srv service) UpdateReturnOrder(ctx context.Context, req request.UpdateReturnOrder, updateBy string) (*response.UpdateReturnOrder, error) {
	// logFinish := srv.logger.LogAPICall(ctx, "UpdateReturnOrder", zap.String("OrderNo", req.OrderNo), zap.String("UpdateBy", updateBy))
	// defer logFinish("Completed", nil)
	srv.logger.Info("üîé Starting return order update process üîé", zap.String("OrderNo", req.OrderNo), zap.String("UpdateBy", updateBy))

	if req.OrderNo == "" {
		err := fmt.Errorf("‚ùó OrderNo is required")
		srv.logger.Error(err)
		return nil, err
	}

	exists, err := srv.returnOrderRepo.CheckOrderNoExist(ctx, req.OrderNo)
	if err != nil {
		srv.logger.Error("‚ùå Error checking OrderNo existence", zap.Error(err))
		return nil, fmt.Errorf("error checking OrderNo existence: %w", err)
	}
	if !exists {
		srv.logger.Warn("‚ùó OrderNo not found", zap.Error(err))
		return nil, fmt.Errorf("‚ùóOrderNo not found: %s", req.OrderNo)
	}

	err = srv.returnOrderRepo.UpdateReturnOrder(ctx, req, updateBy)
	if err != nil {
		srv.logger.Error("‚ùå Error updating ReturnOrder", zap.Error(err))
		return nil, fmt.Errorf("error updating ReturnOrder: %w", err)
	}

	updatedOrder, err := srv.returnOrderRepo.GetUpdateReturnOrder(ctx, req.OrderNo) // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
	if err != nil {
		srv.logger.Error("‚ùå Failed to fetch updated order", zap.Error(err)) // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
		return nil, fmt.Errorf("failed to fetch updated order: %w", err)
	}

	
	return updatedOrder, nil
}

// review
func (srv service) DeleteReturnOrder(ctx context.Context, orderNo string) error {
	// logFinish := srv.logger.LogAPICall(ctx, "DeleteReturnOrder", zap.String("OrderNo", orderNo))
	// defer logFinish("Completed", nil)
	srv.logger.Info("üîé Starting delete return order process üîé", zap.String("OrderNo", orderNo))

	if orderNo == "" {
		err := fmt.Errorf("‚ùó OrderNo are required")
		srv.logger.Error(err)
		return err
	}

	exists, err := srv.returnOrderRepo.CheckOrderNoExist(ctx, orderNo)
	if err != nil {
		srv.logger.Error("‚ùå Error checking OrderNo existence", zap.Error(err))
		return fmt.Errorf("error checking OrderNo existence: %w", err)
	}
	if !exists {
		srv.logger.Warn("‚ùó OrderNo not found", zap.Error(err))
		return fmt.Errorf("‚ùóOrderNo not found: %s", orderNo)

	}

	err = srv.returnOrderRepo.DeleteReturnOrder(ctx, orderNo)
	if err != nil {
		srv.logger.Error("‚ùå Error deleting ReturnOrder", zap.Error(err))
		return fmt.Errorf("error deleting ReturnOrder: %w", err)
	}

	
	return nil
}
