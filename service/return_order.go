package service

import (
	request "boilerplate-backend-go/dto/request"
	response "boilerplate-backend-go/dto/response"
	"boilerplate-backend-go/errors"
	"boilerplate-backend-go/utils"
	"context"
	"database/sql"
	"fmt"

	"go.uber.org/zap"
)

// ‡∏ï‡∏±‡∏ß‡∏™‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏≤‡∏á‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏Å‡∏±‡∏ö API ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡∏à‡∏≤‡∏Å API
type ReturnOrderService interface {
	GetAllReturnOrder(ctx context.Context) ([]response.ReturnOrder, error)
	GetReturnOrderByOrderNo(ctx context.Context, orderNo string) (*response.ReturnOrder, error)
	GetAllReturnOrderLines(ctx context.Context) ([]response.ReturnOrderLine, error)
	GetReturnOrderLinesByReturnID(ctx context.Context, orderNo string) ([]response.ReturnOrderLine, error)
	CreateReturnOrder(ctx context.Context, req request.CreateReturnOrder) (*response.CreateReturnOrder, error)
	UpdateReturnOrder(ctx context.Context, req request.UpdateReturnOrder, updateBy string) (*response.UpdateReturnOrder, error) 
	DeleteReturnOrder(ctx context.Context, orderNo string) error
}

func (srv service) GetAllReturnOrder(ctx context.Context) ([]response.ReturnOrder, error) {
	// Step 1: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ReturnOrder ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	allorder, err := srv.returnOrderRepo.GetAllReturnOrder(ctx)
	if err != nil {
		srv.logger.Error("Error fetching all return orders", zap.Error(err))
		// Step 2: ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á Error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
		return nil, errors.UnexpectedError()
	}

	// Step 3: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ReturnOrder ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
	return allorder, nil
}

func (srv service) GetReturnOrderByOrderNo(ctx context.Context, orderNo string) (*response.ReturnOrder, error) {
	// Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ OrderNo ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
	if orderNo == "" {
		return nil, errors.ValidationError("OrderNo is required")
	}

	// Step 2: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ReturnOrder ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ OrderNo
	idorder, err := srv.returnOrderRepo.GetReturnOrderByOrderNo(ctx, orderNo)
	if err != nil {
		if err == sql.ErrNoRows {
			// Step 3: ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ReturnOrder ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á Error ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
			return nil, errors.NotFoundError("Return order not found")
		}
		srv.logger.Error("Error fetching ReturnOrder by ID", zap.Error(err))
		return nil, errors.UnexpectedError()
	}

	// Step 4: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ReturnOrder ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
	return idorder, nil
}

func (srv service) GetAllReturnOrderLines(ctx context.Context) ([]response.ReturnOrderLine, error) {
	lines, err := srv.returnOrderRepo.GetAllReturnOrderLines(ctx)
	if err != nil {
		srv.logger.Error("Error fetching all return order lines", zap.Error(err))
		return nil, errors.UnexpectedError()
	}

	return lines, nil
}

func (srv service) GetReturnOrderLinesByReturnID(ctx context.Context, orderNo string) ([]response.ReturnOrderLine, error) {
	if orderNo == "" {
		return nil, errors.ValidationError("OrderNo is required")
	}

	lines, err := srv.returnOrderRepo.GetReturnOrderLinesByReturnID(ctx, orderNo)
	if err != nil {
		if err == sql.ErrNoRows {
			return nil, errors.NotFoundError("This Return Order Line not found")
		}
		srv.logger.Error("Error fetching return order lines by OrderNo", zap.Error(err))
		return nil, errors.UnexpectedError()
	}

	return lines, nil
}

func (srv service) CreateReturnOrder(ctx context.Context, req request.CreateReturnOrder) (*response.CreateReturnOrder, error) {
	// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Logging ‡∏Ç‡∏≠‡∏á API Call
	logFinish := srv.logger.LogAPICall(ctx, "CreateReturnOrder", zap.String("OrderNo", req.OrderNo))
	defer logFinish("Completed", nil)

	srv.logger.Info("üîé Starting return order creation process üîé", zap.String("OrderNo", req.OrderNo))

	// Validate request
	if err := utils.ValidateCreateReturnOrder(req); err != nil {
		logFinish("Failed", err)
		srv.logger.Error("‚ùå Validation failed", zap.Error(err))
		return nil, fmt.Errorf("validation failed: %w", err)
	}

	// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ OrderNo ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
	exists, err := srv.returnOrderRepo.CheckOrderNoExist(ctx, req.OrderNo)
	if err != nil {
		srv.logger.Error("Failed to check OrderNo", zap.Error(err))
		return nil, errors.InternalError("Failed to check OrderNo")
	}
	if exists {
		srv.logger.Error("OrderNo already exists", zap.Error(err))
		return nil, errors.BadRequestError("OrderNo already exists")
	}

	err = srv.returnOrderRepo.CreateReturnOrder(ctx, req)
	if err != nil {
		srv.logger.Error("‚ùå Failed to create order with lines", zap.Error(err)) // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á order ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
		return nil, err
	}

	// ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ReturnOrder ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô‡∏°‡∏≤‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÅ‡∏™‡∏î‡∏á
	createdOrder, err := srv.returnOrderRepo.GetCreateReturnOrder(ctx, req.OrderNo)
	if err != nil {
		logFinish("Failed", err)
		srv.logger.Error("‚ùå Failed to fetch created order", zap.Error(err))
		return nil, err
	}

	// Logging ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Log ‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
	logFinish("Success", nil)
	return createdOrder, nil
}

func (srv service) UpdateReturnOrder(ctx context.Context, req request.UpdateReturnOrder, updateBy string) (*response.UpdateReturnOrder, error) {
	// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Logging ‡∏Ç‡∏≠‡∏á API Call
	logFinish := srv.logger.LogAPICall(ctx, "UpdateReturnOrder", zap.String("UpdateBy", updateBy))
	defer logFinish("Completed", nil)
	srv.logger.Info("üîé Starting return order update process üîé")

	// Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ OrderNo ‡πÑ‡∏°‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
	if req.OrderNo == "" {
		return nil, errors.ValidationError("OrderNo is required")
	}

	exists, err := srv.returnOrderRepo.CheckOrderNoExist(ctx, req.OrderNo)
	if err != nil {
		srv.logger.Error("Error checking OrderNo existence", zap.Error(err))
		return nil, errors.UnexpectedError()
	}
	if !exists {
		return nil, errors.NotFoundError("OrderNo not found")
	}

	// Step 2: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ReturnOrder
	err = srv.returnOrderRepo.UpdateReturnOrder(ctx, req)
	if err != nil {
		srv.logger.Error("Error updating ReturnOrder", zap.Error(err))
		return nil, errors.UnexpectedError()
	}

	updatedOrder, err := srv.returnOrderRepo.GetUpdateReturnOrder(ctx, req.OrderNo) // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
	if err != nil {
		srv.logger.Error("‚ùå Failed to fetch updated order", zap.Error(err)) // Logging ‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
		return nil, err
	}

	logFinish("Success", nil)
	return updatedOrder, nil
}

func (srv service) DeleteReturnOrder(ctx context.Context, orderNo string) error {
	if orderNo == "" {
		return errors.ValidationError("OrderNo is required")
	}

	// Step 2: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å repository ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏ö ReturnOrder
	err := srv.returnOrderRepo.DeleteReturnOrder(ctx, orderNo)
	if err != nil {
		srv.logger.Error("Error deleting ReturnOrder", zap.Error(err))
		return errors.UnexpectedError()
	}

	return nil
}
